module utilities
    ! subroutine copy_grid
    ! subroutine copy_grid_n
    ! subroutine subzones_for_transfer
    ! subroutine combine_p_num
    ! attributes(global) subroutine build_p_num
    ! subroutine receive_Zone_de

    use cudafor
    use variable_list, only: nx, ny
    use variable_list, only: buff, ppx, qqy, rank, status
    use variable_list, only: Zonet_old, Zonet_new, Zone_de, Zones_old
    use variable_list, only: grid, grid_old
    use variable_list, only: dx, dy, np_active, p_num
    use variable_list, only: nnx1,nny1,nnx2,nny2,ix1,iy1,ix2,iy2  ! this is the old
    use variable_list, only: nnx1n,nny1n,nnx2n,nny2n,ix1n,iy1n,ix2n,iy2n

contains
    subroutine copy_grid()
        implicit none

        if (rank /= ppx*qqy) then
            ix1  = grid(rank+1,1)
            nnx1 = grid(rank+1,3)
            iy1  = grid(rank+1,2)
            nny1 = grid(rank+1,4)

            ix2 = ix1 - buff; nnx2 = nnx1 + 2*buff
            iy2 = iy1 - buff; nny2 = nny1 + 2*buff

            if(ix1 == 0) then
                ix2  = ix1
                nnx2 = nnx2 - buff
            endif
            if(ix1+nnx1 == nx) nnx2 = nnx2 - buff

            if(iy1 == 0) then
                iy2  = iy1
                nny2 = nny2 - buff
            endif
            if(iy1+nny1 == ny) nny2 = nny2 - buff
        end if

    end subroutine copy_grid

    subroutine copy_grid_n()
        implicit none

        if (rank /= ppx*qqy) then
            ix1n  = grid(rank+1,1)
            nnx1n = grid(rank+1,3)
            iy1n  = grid(rank+1,2)
            nny1n = grid(rank+1,4)

            ix2n  = ix1n - buff
            nnx2n = nnx1n + 2*buff
            iy2n  = iy1n - buff
            nny2n = nny1n + 2*buff

            if(ix1n == 0) then
                ix2n  = ix1n
                nnx2n = nnx2n - buff
            endif
            if(ix1n+nnx1n == nx) nnx2n = nnx2n - buff

            if(iy1n == 0) then
                iy2n  = iy1n
                nny2n = nny2n - buff
            endif
            if(iy1n+nny1n == ny) nny2n = nny2n - buff
        end if

    end subroutine copy_grid_n

    subroutine subzones_for_transfer()
        ! get Zone_de and Zones_new
        ! we use send and recv now, and will be changed to scatter and gather later
        ! manager also needs the info with buff.
        use mpi
        implicit none
        ! integer:: ix1r, iy1r, nnx1r, nny1r
        integer:: i
        integer:: ierr

        if(rank /= ppx*qqy) &
        allocate(Zones_old(-buff+1:nnx1n+buff,-buff+1:nny1n+buff))
        ! new box and old indicators
        Zones_old = -1

        ! old box and new indicator, it is for Zone_de
        if(rank == ppx*qqy) then
            do i = 0, ppx*qqy - 1
                ix1 = grid_old(i+1,1);  iy1 = grid_old(i+1,2)
                nnx1 = grid_old(i+1,3); nny1 = grid_old(i+1,4)
                call MPI_SEND(Zonet_new(-buff+ix1+1:ix1+nnx1+buff,-buff+iy1+1:iy1+nny1+buff), &
                (nnx1+2*buff)*(nny1+2*buff),MPI_INTEGER,i,41,MPI_COMM_WORLD,ierr)
            end do
        else
            call MPI_RECV(Zone_de,(nnx1+2*buff)*(nny1+2*buff),MPI_INTEGER, &
            ppx*qqy,41,MPI_COMM_WORLD,status,ierr)
        endif

        ! new box and old indicator, it is for Zones_old
        if(rank == ppx*qqy) then
            do i = 0, ppx*qqy - 1
                ix1 = grid(i+1,1);  iy1 = grid(i+1,2)
                nnx1 = grid(i+1,3); nny1 = grid(i+1,4)
                call MPI_SEND(Zonet_old(-buff+ix1+1:nnx1+ix1+buff,-buff+iy1+1:nny1+iy1+buff), &
                (nnx1+2*buff)*(nny1+2*buff),MPI_INTEGER,i,41,MPI_COMM_WORLD,ierr)
            end do
        else
            call MPI_RECV(Zones_old,(nnx1n+2*buff)*(nny1n+2*buff),MPI_INTEGER, &
            ppx*qqy,41,MPI_COMM_WORLD,status,ierr)
        endif

    end subroutine subzones_for_transfer

    subroutine combine_p_num(grid)
        use mpi

        implicit none
        integer,managed:: grid(:,:)
        ! this is the current grid
        integer:: i, ierr
        integer:: ix1, iy1, nnx1, nny1
        ! we don't use these variables in this module,s so the variables
        ! here are local.

        ! send p_num to the p_num on rank of ppx*qqy
        ! now we could use send and recv while we can change to scatter/gather latter
        ! p_num is the same name but the size is the whole domain on rank ppx*qqy
        if(rank /= ppx*qqy) then
            nnx1 = grid(i+1,3); nny1 = grid(i+1,4)
            call MPI_SEND(p_num,nnx1*nny1,MPI_INTEGER,ppx*qqy,41,MPI_COMM_WORLD,ierr)
        else
            do i = 0, ppx*qqy - 1
                ix1 = grid(i+1,1);  iy1 = grid(i+1,2)
                nnx1 = grid(i+1,3); nny1 = grid(i+1,4)
                call MPI_RECV(p_num(ix1+1:ix1+nnx1,iy1+1:iy1+nny1),nnx1*nny1, &
                MPI_INTEGER,i,41,MPI_COMM_WORLD,status,ierr)
            end do
        endif

    end subroutine combine_p_num

    attributes(global) subroutine build_p_num(ix1,iy1)
        implicit none
        integer:: Ploc(3), ii, lock, temp
        ! building p_num doesn't need buffer zone
        integer,value:: ix1, iy1

        ii = (blockIdx%x - 1) * blockDim%x + threadIdx%x
        lock = 1

        if(ii < np_active) then
            P(ii,1) = P(ii,1) - ix1*dx
            P(ii,2) = P(ii,2) - iy1*dy

            Ploc(1) = floor(P(ii,1) / dx)
            Ploc(2) = floor(P(ii,2) / dy)

            temp = atomicAdd(p_num(Ploc(1)+1,Ploc(2)+1),lock)

            P(ii,1) = P(ii,1) + ix1*dx
            P(ii,2) = P(ii,2) + iy1*dy
        endif

    end subroutine build_p_num

    subroutine receive_Zone_de()
        ! we use send and recv now, and will consider scatter and gather later
        use mpi
        implicit none
        integer:: ncount1, request1(ppx*qqy), request2
        integer:: i, ierr

        if(rank /= ppx*qqy) then
            call MPI_IRECV(Zone_de,(nnx1+2*buff)*(nny1+2*buff),MPI_INTEGER, &
            ppx*qqy,41,MPI_COMM_WORLD,request2,ierr)
        else
            ncount1 = 0
            do i = 0, ppx*qqy - 1
                ncount1 = ncount1 + 1
                 ix1 = grid(i+1,1);  iy1 = grid(i+1,2)
                nnx1 = grid(i+1,3); nny1 = grid(i+1,4)
                call MPI_ISEND(Zonet_new(-buff+ix1+1:ix1+nnx1+buff,-buff+iy1+1:iy1+nny1+buff), &
                (nnx1+2*buff)*(nny1+2*buff),MPI_INTEGER,i,41,MPI_COMM_WORLD,request1(ncount1),ierr)
            end do
        endif
    end subroutine receive_Zone_de

end module utilities