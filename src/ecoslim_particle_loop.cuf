module particle_loop
    ! attributes(global) subroutine particles_separation
    ! attributes(global) subroutine particles_independent
    ! attributes(global) subroutine Update_C_Array
    use cudafor
    use curand_device
    use mrand, only: h
    use variable_list, only: EvapTrans_de,Saturation_de,Porosity_de
    use variable_list, only: Zone_de,Ind_de,C_de,Vx_de,Vy_de,Vz_de
    use variable_list, only: dx, dy, pfdt
    #if _TEXTURE == 1
    use variable_list, only: EvapTrans_T,Saturation_T,Porosity_T
    use variable_list, only: Vx_T,Vy_T,Vz_T,Ind_T,dz_T
    #endif

contains
    attributes(global) subroutine particles_separation(P,d_isValid, &
        xmin3,ymin3,xmax3,ymax3,np_active,ix1,iy1)
        implicit none
        real(8),intent(inout):: P(:,:)
        integer,intent(out):: d_isValid(:)
        real(8),value:: xmin3,ymin3,xmax3,ymax3
        integer,value:: np_active,ix1,iy1
        integer:: ii

        ii = (blockIdx%x - 1) * blockDim%x + threadIdx%x
        if (ii <= np_active) then
            ! Transfer global to local
            P(ii,1) = P(ii,1) - dble(ix1)*dx
            P(ii,2) = P(ii,2) - dble(iy1)*dy

            d_isValid(ii) = 1
            if(P(ii,1) < xmin3 .or. P(ii,2) < ymin3 .or. P(ii,1) >= xmax3 &
                .or. P(ii,2) >= ymax3) then
                d_isValid(ii) = 0
            end if

            ! Transfer local coordinates to global
            P(ii,1) = P(ii,1) + dble(ix1)*dx
            P(ii,2) = P(ii,2) + dble(iy1)*dy
        end if
    end subroutine particles_separation

    attributes(global) subroutine particles_independent( &
        P,dz,out_age,out_mass,out_comp,out_np, &
        et_age,et_mass,et_comp,et_np, &
        xgmin,ygmin,zgmin,xgmax,ygmax,zgmax, &
        xmin,ymin,zmin,xmax,ymax,zmax, &
        moldiff,denh2o,dtfrac,offset,np_active, &
        nind,ix1,iy1,nz,reflect,rank)

        implicit none

        real(8),intent(inout):: P(:,:)
        real(8),intent(in):: dz(:)
        real(8),intent(inout):: out_age(:),out_mass(:),out_comp(:)
        real(8),intent(inout):: et_age(:),et_mass(:),et_comp(:)
        integer,intent(inout):: out_np(:),et_np(:)

        real(8),value:: xgmin,ygmin,zgmin,xgmax,ygmax,zgmax
        real(8),value:: xmin,ymin,zmin,xmax,ymax,zmax
        real(8),value:: moldiff,denh2o,dtfrac
        integer,value:: np_active,nind,ix1,iy1,nz
        integer,value:: offset,rank
        logical,value:: reflect

        integer:: ii,k,Ploc(3),itemp
        real(8):: Clocx,Clocy,Clocz,Vpx,Vpy,Vpz,Z, &
        particledt,delta_time,et_flux,water_vol,advdt(3), &
        z1,z2,z3,Zr,temp,one,Ltemp
        !--------------------------------------
        ii = offset + (blockIdx%x - 1) * blockDim%x + threadIdx%x
        one = 1.d0
        !--------------------------------------
        ! xgmin = xgmin - dble(ix1)*dx
        ! ygmin = ygmin - dble(iy1)*dy
        ! xgmax = xgmax - dble(ix1)*dx
        ! ygmax = ygmax - dble(iy1)*dy

        if(P(ii,8) == 1. .and. ii <= offset + np_active) then

            delta_time = 0.d0

            ! Transfer global to local
            P(ii,1) = P(ii,1) - dble(ix1)*dx
            P(ii,2) = P(ii,2) - dble(iy1)*dy
            ! at this moment, after exchange, overlap zones are empty
            ! pay careful attention to BC

            delta_time = P(ii,4) + pfdt

            do while (P(ii,4) < delta_time)

                ! Find the "adjacent" cell corresponding to the particle's location
                ! FLOOR(A) returns the greatest integer less than or equal to X.
                Ploc(1) = floor(P(ii,1) / dx)
                Ploc(2) = floor(P(ii,2) / dy)
                ! if(Ploc(1) >= nnx1 + buff) Ploc(1) = nnx1 + buff - 1
                ! if(Ploc(2) >= nny1 + buff) Ploc(2) = nny1 + buff - 1

                Z = 0.d0
                do k = 1, nz
                    Z = Z + dz(k)
                    if (Z >= P(ii,3)) then
                        Ploc(3) = k - 1
                        exit
                    end if
                end do

                ! check to make sure particles are in central part of the domain and if not
                ! apply some boundary condition to them
                ! check if particles are in domain, need to expand this to include better treatment of BC's
                if ((P(ii,1) < Xmin).or.(P(ii,2) < Ymin).or.(P(ii,3) < Zmin).or. &
                    (P(ii,1) >= Xmax).or.(P(ii,2) >= Ymax).or.(P(ii,3) >= (Zmax-dz(nz)))) then

                if ((P(ii,3) >= Zmax-(dz(nz)*0.5d0)).and. &
                    (Saturation_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) == 1.).and. &
                    (Vz_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) > 0.d0)) then

                    temp = atomicAdd(Out_age(1), P(ii,4)*P(ii,6))
                    temp = atomicAdd(Out_mass(1), P(ii,6))

                    if (P(ii,7) == 1.) then
                        temp = atomicAdd(Out_comp(1), P(ii,6))
                    end if

                    if (P(ii,7) == 2.) then
                        temp = atomicAdd(Out_comp(2), P(ii,6))
                    end if

                    if (P(ii,7) == 3.) then
                        temp = atomicAdd(Out_comp(3), P(ii,6))
                    end if

                    temp = atomicAdd(Out_np(1), idnint(one))

                    ! flag particle as inactive
                    P(ii,8) = 0.d0
                    ! flag as exiting via Outflow
                    P(ii,10) = 1.d0
                    goto 999

                end if
                ! otherwise we just leave it in the domain to reflect
                end if

                ! Find each particle's factional cell location
                Clocx = (P(ii,1) - dble(Ploc(1))*dx)  / dx
                Clocy = (P(ii,2) - dble(Ploc(2))*dy)  / dy

                Z = 0.d0
                do k = 1, Ploc(3)
                    Z = Z + dz(k)
                end do
                Clocz = (P(ii,3) - Z) / dz(Ploc(3) + 1)

                ! Calculate local particle velocity using linear interpolation,
                ! converting darcy flux to average linear velocity

                Vpx = ((1.-Clocx)*Vx_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                    + Vx_de(Ploc(1)+2,Ploc(2)+1,Ploc(3)+1)*Clocx)   &
                    /(Porosity_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                    *Saturation_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                Vpy = ((1.-Clocy)*Vy_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        + Vy_de(Ploc(1)+1,Ploc(2)+2,Ploc(3)+1)*Clocy) &
                        /(Porosity_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        *Saturation_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                Vpz = ((1.-Clocz)*Vz_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        + Vz_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+2)*Clocz)  &
                            /(Porosity_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        *Saturation_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                ! calculate particle dt
                ! check each direction independently
                advdt = pfdt
                if (Vpx /= 0.) advdt(1) = dabs(dtfrac*(dx/Vpx))
                if (Vpy /= 0.) advdt(2) = dabs(dtfrac*(dy/Vpy))
                if (Vpz /= 0.) advdt(3) = dtfrac*(dz(Ploc(3)+1)/dabs(Vpz))

                particledt = min(advdt(1), advdt(2), advdt(3), &
                                pfdt*dtfrac, delta_time-P(ii,4))

                ! calculate Flux in cell and compare it with the ET flux out of the cell
                if (EvapTrans_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) < 0.d0) then
                ! calculate ET flux volumetrically and compare to
                et_flux = dabs(EvapTrans_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))*dx*dy*dz(Ploc(3)+1)

                ! compare total water removed from cell by ET with total water available in cell to arrive at a particle
                ! probability of being captured by roots
                ! water volume in cell
                water_vol = dx*dy*dz(Ploc(3)+1)*(Porosity_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                            *Saturation_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                Zr = curand_uniform(h(ii))

                if (Zr < ((et_flux*particledt)/water_vol)) then   ! check if particle is 'captured' by the roots
                !  this section made atomic since it could inovlve a data race
                !  that is, each thread can only update the ET arrays one at a time

                    temp = atomicAdd(ET_age(1), P(ii,4)*P(ii,6))

                    temp = atomicAdd(ET_mass(1), P(ii,6))

                    if (P(ii,7) == 1.) then
                        temp = atomicAdd(ET_comp(1), P(ii,6))
                    end if

                    if (P(ii,7) == 2.) then
                        temp = atomicAdd(ET_comp(2), P(ii,6))
                    end if

                    if (P(ii,7) == 3.) then
                        temp = atomicAdd(ET_comp(3), P(ii,6))
                    end if

                    temp = atomicAdd(ET_np(1), idnint(one))

                    ! outputting spatially distributed ET information
                    ! here it is a problem, probably have to be done after transfer.
                    ! can keep it here but only for the area except overlap Zone
                    ! temp = atomicAdd(C(6,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),one)

                    ! temp = atomicAdd(C(7,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,6)) ! particle mass added to ET

                    ! temp = atomicAdd(C(8,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,4)*P(ii,6))  ! mass weighted age

                    ! temp = atomicAdd(C(9,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,7)*P(ii,6))  ! mass weighted contribution

                    ! now remove particle from domain
                    P(ii,8) = 0.d0
                    ! flag as exiting via ET
                    P(ii,10) = 2.d0
                    goto 999

                end if
                end if

                ! Advect particle to new location using Euler advection until next time
                P(ii,1) = P(ii,1) + particledt * Vpx
                P(ii,2) = P(ii,2) + particledt * Vpy
                P(ii,3) = P(ii,3) + particledt * Vpz
                P(ii,4) = P(ii,4) + particledt

                Ltemp = dsqrt((particledt*Vpx)**2 + (particledt*Vpy)**2 + &
                             (particledt*Vpz)**2)

                ! Molecular Diffusion
                if (moldiff > 0.d0) then
                    z1 = 2.d0*dsqrt(3.d0)*(curand_uniform(h(ii))-0.5d0)
                    z2 = 2.d0*dsqrt(3.d0)*(curand_uniform(h(ii))-0.5d0)
                    z3 = 2.d0*dsqrt(3.d0)*(curand_uniform(h(ii))-0.5d0)

                    P(ii,1) = P(ii,1) + z1 * dsqrt(moldiff*2.d0*particledt)
                    P(ii,2) = P(ii,2) + z2 * dsqrt(moldiff*2.d0*particledt)
                    P(ii,3) = P(ii,3) + z3 * dsqrt(moldiff*2.d0*particledt)

                    Ltemp = Ltemp + &
                                dsqrt((z1*dsqrt(moldiff*2.d0*particledt))**2 + &
                                     (z2*dsqrt(moldiff*2.d0*particledt))**2 + &
                                     (z3*dsqrt(moldiff*2.d0*particledt))**2)
                end if
                P(ii,11) = P(ii,11) + Ltemp
                ! placeholder for other interactions; potentially added later
                !
                ! place to track saturated / groundwater time if needed
                if(Saturation_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) == 1.) then
                    P(ii,5) = P(ii,5) + particledt
                    P(ii,12) = P(ii,12) + Ltemp
                end if

                if (nind > 0) then
                    itemp=idnint(Ind_de(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))
                    if(itemp > 0 .and. itemp <= nind) then
                        P(ii,12+itemp) = P(ii,12+itemp) + particledt
                        P(ii,12+nind+itemp) = P(ii,12+nind+itemp) + Ltemp
                    end  if
                end if

                if (reflect) then
                ! we can choose to reflect the particle or not if it is out of
                ! the whole modeling domain. g means the golbal boundary.
                ! currently, we should keep reflect true.
                ! simple reflection boundary
                    if (P(ii,3) >= Zgmax) P(ii,3) = Zgmax- (P(ii,3) - Zgmax)
                    if (P(ii,1) >= Xgmax) P(ii,1) = Xgmax- (P(ii,1) - Xgmax)
                    if (P(ii,2) >= Ygmax) P(ii,2) = Ygmax- (P(ii,2) - Ygmax)
                    if (P(ii,2) <= Ygmin) P(ii,2) = Ygmin+ (Ygmin - P(ii,2))
                    if (P(ii,3) <= Zgmin) P(ii,3) = Zgmin+ (Zgmin - P(ii,3))
                    if (P(ii,1) <= Xgmin) P(ii,1) = Xgmin+ (Xgmin - P(ii,1))
                end if

                if ((P(ii,1) <  Xmin).or.(P(ii,2) <  Ymin).or.(P(ii,3) < Zmin).or. &
                    (P(ii,1) >= Xmax).or.(P(ii,2) >= Ymax).or.(P(ii,3) > Zmax).or. &
                    (P(ii,1) <  Xgmin).or.(P(ii,2) <  Ygmin).or.(P(ii,3) < Zgmin).or. &
                    (P(ii,1) >= Xgmax).or.(P(ii,2) >= Ygmax).or.(P(ii,3) > Zgmax)) then
                    ! unavoidable particle loss, this should be written into the log file later.
                    ! flag particle as inactive
                    P(ii, 8) = 0.d0
                    ! flag as exiting via loss
                    P(ii,10) = 3.d0
                    goto 999
                end if

            end do ! end of do-while loop for particle time to next time
            999 continue ! where we go if the particle is out of bounds

            ! concentration routine
            ! Find the "adjacent" "cell corresponding to the particle's location
            Ploc(1) = floor(P(ii,1) / dx)
            Ploc(2) = floor(P(ii,2) / dy)

            !Z = 0.d0
            !do k = 1, nz
            !    Z = Z + dz(k)
            !    if (Z >= P(ii,3)) then
            !        Ploc(3) = k - 1
            !        exit
            !    end if
            !end do

            ! Zone/neighbor identification for cuda-aware transfer.
            ! keep an eye for ET particles
            P(ii,13+2*nind) = -1.
            if(P(ii,10) /= 3.) then ! otherwise, particle is out of domain
                if(Zone_de(Ploc(1)+1,Ploc(2)+1) /= rank) then
                    if(P(ii,8) == 1. .or. (P(ii,8) == 0. .and. P(ii,10) == 2.)) &
                    P(ii,13+2*nind) = Zone_de(Ploc(1)+1,Ploc(2)+1)
                end if
            endif
            ! Hence, particles which will be sent to neighbors has been labeled

            ! Transfer local coordinates to global
            P(ii,1) = P(ii,1) + dble(ix1)*dx
            P(ii,2) = P(ii,2) + dble(iy1)*dy

        end if

    end subroutine particles_independent

    #if _TEXTURE == 1
    #if _SHARED == 1
    attributes(global) subroutine particles_independent_T( &
        P,out_age,out_mass,out_comp,out_np, &
        et_age,et_mass,et_comp,et_np, &
        xgmin,ygmin,zgmin,xgmax,ygmax,zgmax, &
        xmin,ymin,zmin,xmax,ymax,zmax, &
        moldiff,denh2o,dtfrac,offset,np_active, &
        nind,ix1,iy1,nz,reflect,rank)

        implicit none

        integer,parameter:: tPB = 256
        real(8),intent(inout):: P(:,:)
        real(8),intent(inout):: out_age(:),out_mass(:),out_comp(:)
        real(8),intent(inout):: et_age(:),et_mass(:),et_comp(:)
        integer,intent(inout):: out_np(:),et_np(:)

        real(8),value:: xgmin,ygmin,zgmin,xgmax,ygmax,zgmax
        real(8),value:: xmin,ymin,zmin,xmax,ymax,zmax
        real(8),value:: moldiff,denh2o,dtfrac
        integer,value:: np_active,nind,ix1,iy1,nz
        integer,value:: offset,rank
        logical,value:: reflect

        integer:: ii,k,Ploc(3),itemp,ii_g
        real(8):: Clocx,Clocy,Clocz,Vpx,Vpy,Vpz,Z, &
        particledt,delta_time,et_flux,water_vol,advdt(3), &
        z1,z2,z3,Zr,temp,one,Ltemp

        real(8),shared::P_s(tPB,13+nind*2)
        !--------------------------------------
        one = 1.d0
        ii_g = offset + (blockIdx%x - 1) * blockDim%x + threadIdx%x
        ii = threadIdx%x
        P_s(ii,1:13+nind*2) = P(ii_g,1:13+nind*2)
        !--------------------------------------
        ! xgmin = xgmin - dble(ix1)*dx
        ! ygmin = ygmin - dble(iy1)*dy
        ! xgmax = xgmax - dble(ix1)*dx
        ! ygmax = ygmax - dble(iy1)*dy

        if(P_s(ii,8) == 1. .and. ii_g <= offset + np_active) then

            delta_time = 0.d0

            ! Transfer global to local
            P_s(ii,1) = P_s(ii,1) - dble(ix1)*dx
            P_s(ii,2) = P_s(ii,2) - dble(iy1)*dy
            ! at this moment, after exchange, overlap zones are empty
            ! pay careful attention to BC

            delta_time = P_s(ii,4) + pfdt

            do while (P_s(ii,4) < delta_time)

                ! Find the "adjacent" cell corresponding to the particle's location
                ! FLOOR(A) returns the greatest integer less than or equal to X.
                Ploc(1) = floor(P_s(ii,1) / dx)
                Ploc(2) = floor(P_s(ii,2) / dy)
                ! if(Ploc(1) >= nnx1 + buff) Ploc(1) = nnx1 + buff - 1
                ! if(Ploc(2) >= nny1 + buff) Ploc(2) = nny1 + buff - 1

                Z = 0.d0
                do k = 1, nz
                    Z = Z + dz_T(k)
                    if (Z >= P_s(ii,3)) then
                        Ploc(3) = k - 1
                        exit
                    end if
                end do

                if(Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) <= 0.d0) then
                    ! the problem is you cannot check if the particle has been in the inactive
                    ! area after the last do while iteration.
                    ! but it can be checked in the next do loop in the next timestep.
                    ! however, this will make an inactive particle as active until next do loop.
                    ! make sure there is no out of boundary during period.

                    P_s(ii,8) = 0.d0
                    ! flag as inactive due to inactive cells
                    P_s(ii,10) = 4.d0
                    goto 999

                end if

                ! check to make sure particles are in central part of the domain and if not
                ! apply some boundary condition to them
                ! check if particles are in domain, need to expand this to include better treatment of BC's
                if ((P_s(ii,1) < Xmin).or.(P_s(ii,2) < Ymin).or.(P_s(ii,3) < Zmin).or. &
                    (P_s(ii,1) >= Xmax).or.(P_s(ii,2) >= Ymax).or.(P_s(ii,3) >= (Zmax-dz_T(nz)))) then

                if ((P_s(ii,3) >= Zmax-(dz_T(nz)*0.5d0)).and. &
                    (Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) == 1.).and. &
                    (Vz_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) > 0.d0)) then

                    temp = atomicAdd(Out_age(1), P_s(ii,4)*P_s(ii,6))
                    temp = atomicAdd(Out_mass(1), P_s(ii,6))

                    if (P_s(ii,7) == 1.) then
                        temp = atomicAdd(Out_comp(1), P_s(ii,6))
                    end if

                    if (P_s(ii,7) == 2.) then
                        temp = atomicAdd(Out_comp(2), P_s(ii,6))
                    end if

                    if (P_s(ii,7) == 3.) then
                        temp = atomicAdd(Out_comp(3), P_s(ii,6))
                    end if

                    temp = atomicAdd(Out_np(1), idnint(one))

                    ! flag particle as inactive
                    P_s(ii,8) = 0.d0
                    ! flag as exiting via Outflow
                    P_s(ii,10) = 1.d0
                    goto 999

                end if
                ! otherwise we just leave it in the domain to reflect
                end if

                ! Find each particle's factional cell location
                Clocx = (P_s(ii,1) - dble(Ploc(1))*dx)  / dx
                Clocy = (P_s(ii,2) - dble(Ploc(2))*dy)  / dy

                Z = 0.d0
                do k = 1, Ploc(3)
                    Z = Z + dz_T(k)
                end do
                Clocz = (P_s(ii,3) - Z) / dz_T(Ploc(3) + 1)

                ! Calculate local particle velocity using linear interpolation,
                ! converting darcy flux to average linear velocity

                Vpx = ((1.-Clocx)*Vx_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                    + Vx_T(Ploc(1)+2,Ploc(2)+1,Ploc(3)+1)*Clocx)   &
                    /(Porosity_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                    *Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                Vpy = ((1.-Clocy)*Vy_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        + Vy_T(Ploc(1)+1,Ploc(2)+2,Ploc(3)+1)*Clocy) &
                        /(Porosity_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        *Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                Vpz = ((1.-Clocz)*Vz_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        + Vz_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+2)*Clocz)  &
                            /(Porosity_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        *Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                ! calculate particle dt
                ! check each direction independently
                advdt = pfdt
                if (Vpx /= 0.) advdt(1) = dabs(dtfrac*(dx/Vpx))
                if (Vpy /= 0.) advdt(2) = dabs(dtfrac*(dy/Vpy))
                if (Vpz /= 0.) advdt(3) = dtfrac*(dz_T(Ploc(3)+1)/dabs(Vpz))

                particledt = min(advdt(1), advdt(2), advdt(3), &
                                pfdt*dtfrac, delta_time-P_s(ii,4))

                ! calculate Flux in cell and compare it with the ET flux out of the cell
                if (EvapTrans_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) < 0.d0) then
                ! calculate ET flux volumetrically and compare to
                et_flux = dabs(EvapTrans_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))*dx*dy*dz_T(Ploc(3)+1)

                ! compare total water removed from cell by ET with total water available in cell to arrive at a particle
                ! probability of being captured by roots
                ! water volume in cell
                water_vol = dx*dy*dz_T(Ploc(3)+1)*(Porosity_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                            *Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                Zr = curand_uniform(h(ii_g))

                if (Zr < ((et_flux*particledt)/water_vol)) then   ! check if particle is 'captured' by the roots
                !  this section made atomic since it could inovlve a data race
                !  that is, each thread can only update the ET arrays one at a time

                    temp = atomicAdd(ET_age(1), P_s(ii,4)*P_s(ii,6))

                    temp = atomicAdd(ET_mass(1), P_s(ii,6))

                    if (P_s(ii,7) == 1.) then
                        temp = atomicAdd(ET_comp(1), P_s(ii,6))
                    end if

                    if (P_s(ii,7) == 2.) then
                        temp = atomicAdd(ET_comp(2), P_s(ii,6))
                    end if

                    if (P_s(ii,7) == 3.) then
                        temp = atomicAdd(ET_comp(3), P_s(ii,6))
                    end if

                    temp = atomicAdd(ET_np(1), idnint(one))

                    ! outputting spatially distributed ET information
                    ! here it is a problem, probably have to be done after transfer.
                    ! can keep it here but only for the area except overlap Zone
                    ! temp = atomicAdd(C(6,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),one)

                    ! temp = atomicAdd(C(7,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,6)) ! particle mass added to ET

                    ! temp = atomicAdd(C(8,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,4)*P(ii,6))  ! mass weighted age

                    ! temp = atomicAdd(C(9,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,7)*P(ii,6))  ! mass weighted contribution

                    ! now remove particle from domain
                    P_s(ii,8) = 0.d0
                    ! flag as exiting via ET
                    P_s(ii,10) = 2.d0
                    goto 999

                end if
                end if

                ! Advect particle to new location using Euler advection until next time
                P_s(ii,1) = P_s(ii,1) + particledt * Vpx
                P_s(ii,2) = P_s(ii,2) + particledt * Vpy
                P_s(ii,3) = P_s(ii,3) + particledt * Vpz
                P_s(ii,4) = P_s(ii,4) + particledt

                Ltemp = dsqrt((particledt*Vpx)**2 + (particledt*Vpy)**2 + &
                             (particledt*Vpz)**2)

                ! Molecular Diffusion
                if (moldiff > 0.d0) then
                    z1 = 2.d0*dsqrt(3.d0)*(curand_uniform(h(ii_g))-0.5d0)
                    z2 = 2.d0*dsqrt(3.d0)*(curand_uniform(h(ii_g))-0.5d0)
                    z3 = 2.d0*dsqrt(3.d0)*(curand_uniform(h(ii_g))-0.5d0)

                    P_s(ii,1) = P_s(ii,1) + z1 * dsqrt(moldiff*2.d0*particledt)
                    P_s(ii,2) = P_s(ii,2) + z2 * dsqrt(moldiff*2.d0*particledt)
                    P_s(ii,3) = P_s(ii,3) + z3 * dsqrt(moldiff*2.d0*particledt)

                    Ltemp = Ltemp + &
                                dsqrt((z1*dsqrt(moldiff*2.d0*particledt))**2 + &
                                     (z2*dsqrt(moldiff*2.d0*particledt))**2 + &
                                     (z3*dsqrt(moldiff*2.d0*particledt))**2)
                end if
                P_s(ii,11) = P_s(ii,11) + Ltemp
                ! placeholder for other interactions; potentially added later
                !
                ! place to track saturated / groundwater time if needed
                if(Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) == 1.) then
                    P_s(ii,5) = P_s(ii,5) + particledt
                    P_s(ii,12) = P_s(ii,12) + Ltemp
                end if

                if (nind > 0) then
                    itemp=idnint(Ind_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))
                    if(itemp > 0 .and. itemp <= nind) then
                        P_s(ii,12+itemp) = P_s(ii,12+itemp) + particledt
                        P_s(ii,12+nind+itemp) = P_s(ii,12+nind+itemp) + Ltemp
                    end  if
                end if

                if (reflect) then
                ! we can choose to reflect the particle or not if it is out of
                ! the whole modeling domain. g means the golbal boundary.
                ! currently, we should keep reflect true.
                ! simple reflection boundary
                    if (P_s(ii,3) >= Zgmax) P_s(ii,3) = Zgmax- (P_s(ii,3) - Zgmax)
                    if (P_s(ii,1) >= Xgmax) P_s(ii,1) = Xgmax- (P_s(ii,1) - Xgmax)
                    if (P_s(ii,2) >= Ygmax) P_s(ii,2) = Ygmax- (P_s(ii,2) - Ygmax)
                    if (P_s(ii,2) <= Ygmin) P_s(ii,2) = Ygmin+ (Ygmin - P_s(ii,2))
                    if (P_s(ii,3) <= Zgmin) P_s(ii,3) = Zgmin+ (Zgmin - P_s(ii,3))
                    if (P_s(ii,1) <= Xgmin) P_s(ii,1) = Xgmin+ (Xgmin - P_s(ii,1))
                end if

                if ((P_s(ii,1) <  Xmin).or.(P_s(ii,2) <  Ymin).or.(P_s(ii,3) < Zmin).or. &
                    (P_s(ii,1) >= Xmax).or.(P_s(ii,2) >= Ymax).or.(P_s(ii,3) > Zmax).or. &
                    (P_s(ii,1) <  Xgmin).or.(P_s(ii,2) <  Ygmin).or.(P_s(ii,3) < Zgmin).or. &
                    (P_s(ii,1) >= Xgmax).or.(P_s(ii,2) >= Ygmax).or.(P_s(ii,3) > Zgmax)) then
                    ! unavoidable particle loss, this should be written into the log file later.
                    ! flag particle as inactive
                    P_s(ii,8) = 0.d0
                    ! flag as exiting via loss
                    P_s(ii,10) = 3.d0
                    goto 999
                end if

            end do ! end of do-while loop for particle time to next time
            999 continue ! where we go if the particle is out of bounds

            ! concentration routine
            ! Find the "adjacent" "cell corresponding to the particle's location
            Ploc(1) = floor(P_s(ii,1) / dx)
            Ploc(2) = floor(P_s(ii,2) / dy)

            !Z = 0.d0
            !do k = 1, nz
            !    Z = Z + dz_T(k)
            !    if (Z >= P(ii,3)) then
            !        Ploc(3) = k - 1
            !        exit
            !    end if
            !end do

            ! Zone/neighbor identification for cuda-aware transfer.
            ! keep an eye for ET particles
            P_s(ii,13+2*nind) = -1.
            if(P_s(ii,10) /= 3.) then ! otherwise, particle is out of domain
                if(Zone_de(Ploc(1)+1,Ploc(2)+1) /= rank) then
                    ! we assume the above boundary constrain has clean the -1 area of Zone_de
                    ! i.e., there will be no particles in the -1 halo
                    if(P_s(ii,8) == 1. .or. (P_s(ii,8) == 0. .and. P_s(ii,10) == 2.)) &
                    P_s(ii,13+2*nind) = Zone_de(Ploc(1)+1,Ploc(2)+1)
                end if
            endif
            ! Hence, particles which will be sent to neighbors has been labelled

            ! Transfer local coordinates to global
            P_s(ii,1) = P_s(ii,1) + dble(ix1)*dx
            P_s(ii,2) = P_s(ii,2) + dble(iy1)*dy

        end if

        P(ii_g,1:13+nind*2) = P_s(ii,1:13+nind*2)
    end subroutine particles_independent_T
    #else
    attributes(global) subroutine particles_independent_T( &
        P,out_age,out_mass,out_comp,out_np, &
        et_age,et_mass,et_comp,et_np, &
        xgmin,ygmin,zgmin,xgmax,ygmax,zgmax, &
        xmin,ymin,zmin,xmax,ymax,zmax, &
        moldiff,denh2o,dtfrac,offset,np_active, &
        nind,ix1,iy1,nz,reflect,rank)

        implicit none

        real(8),intent(inout):: P(:,:)
        real(8),intent(inout):: out_age(:),out_mass(:),out_comp(:)
        real(8),intent(inout):: et_age(:),et_mass(:),et_comp(:)
        integer,intent(inout):: out_np(:),et_np(:)

        real(8),value:: xgmin,ygmin,zgmin,xgmax,ygmax,zgmax
        real(8),value:: xmin,ymin,zmin,xmax,ymax,zmax
        real(8),value:: moldiff,denh2o,dtfrac
        integer,value:: np_active,nind,ix1,iy1,nz
        integer,value:: offset,rank
        logical,value:: reflect

        integer:: ii,k,Ploc(3),itemp
        real(8):: Clocx,Clocy,Clocz,Vpx,Vpy,Vpz,Z, &
        particledt,delta_time,et_flux,water_vol,advdt(3), &
        z1,z2,z3,Zr,temp,one,Ltemp
        !--------------------------------------
        one = 1.d0
        ii = offset + (blockIdx%x - 1) * blockDim%x + threadIdx%x
        !--------------------------------------
        ! xgmin = xgmin - dble(ix1)*dx
        ! ygmin = ygmin - dble(iy1)*dy
        ! xgmax = xgmax - dble(ix1)*dx
        ! ygmax = ygmax - dble(iy1)*dy

        if(P(ii,8) == 1. .and. ii <= offset + np_active) then

            delta_time = 0.d0

            ! Transfer global to local
            P(ii,1) = P(ii,1) - dble(ix1)*dx
            P(ii,2) = P(ii,2) - dble(iy1)*dy
            ! at this moment, after exchange, overlap zones are empty
            ! pay careful attention to BC

            delta_time = P(ii,4) + pfdt

            do while (P(ii,4) < delta_time)

                ! Find the "adjacent" cell corresponding to the particle's location
                ! FLOOR(A) returns the greatest integer less than or equal to X.
                Ploc(1) = floor(P(ii,1) / dx)
                Ploc(2) = floor(P(ii,2) / dy)
                ! if(Ploc(1) >= nnx1 + buff) Ploc(1) = nnx1 + buff - 1
                ! if(Ploc(2) >= nny1 + buff) Ploc(2) = nny1 + buff - 1

                Z = 0.d0
                do k = 1, nz
                    Z = Z + dz_T(k)
                    if (Z >= P(ii,3)) then
                        Ploc(3) = k - 1
                        exit
                    end if
                end do

                ! check to make sure particles are in central part of the domain and if not
                ! apply some boundary condition to them
                ! check if particles are in domain, need to expand this to include better treatment of BC's
                if ((P(ii,1) < Xmin).or.(P(ii,2) < Ymin).or.(P(ii,3) < Zmin).or. &
                    (P(ii,1) >= Xmax).or.(P(ii,2) >= Ymax).or.(P(ii,3) >= (Zmax-dz_T(nz)))) then

                if ((P(ii,3) >= Zmax-(dz_T(nz)*0.5d0)).and. &
                    (Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) == 1.).and. &
                    (Vz_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) > 0.d0)) then

                    temp = atomicAdd(Out_age(1), P(ii,4)*P(ii,6))
                    temp = atomicAdd(Out_mass(1), P(ii,6))

                    if (P(ii,7) == 1.) then
                        temp = atomicAdd(Out_comp(1), P(ii,6))
                    end if

                    if (P(ii,7) == 2.) then
                        temp = atomicAdd(Out_comp(2), P(ii,6))
                    end if

                    if (P(ii,7) == 3.) then
                        temp = atomicAdd(Out_comp(3), P(ii,6))
                    end if

                    temp = atomicAdd(Out_np(1), idnint(one))

                    ! flag particle as inactive
                    P(ii,8) = 0.d0
                    ! flag as exiting via Outflow
                    P(ii,10) = 1.d0
                    goto 999

                end if
                ! otherwise we just leave it in the domain to reflect
                end if

                ! Find each particle's factional cell location
                Clocx = (P(ii,1) - dble(Ploc(1))*dx)  / dx
                Clocy = (P(ii,2) - dble(Ploc(2))*dy)  / dy

                Z = 0.d0
                do k = 1, Ploc(3)
                    Z = Z + dz_T(k)
                end do
                Clocz = (P(ii,3) - Z) / dz_T(Ploc(3) + 1)

                ! Calculate local particle velocity using linear interpolation,
                ! converting darcy flux to average linear velocity

                Vpx = ((1.-Clocx)*Vx_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                    + Vx_T(Ploc(1)+2,Ploc(2)+1,Ploc(3)+1)*Clocx)   &
                    /(Porosity_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                    *Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                Vpy = ((1.-Clocy)*Vy_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        + Vy_T(Ploc(1)+1,Ploc(2)+2,Ploc(3)+1)*Clocy) &
                        /(Porosity_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        *Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                Vpz = ((1.-Clocz)*Vz_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        + Vz_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+2)*Clocz)  &
                            /(Porosity_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                        *Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                ! calculate particle dt
                ! check each direction independently
                advdt = pfdt
                if (Vpx /= 0.) advdt(1) = dabs(dtfrac*(dx/Vpx))
                if (Vpy /= 0.) advdt(2) = dabs(dtfrac*(dy/Vpy))
                if (Vpz /= 0.) advdt(3) = dtfrac*(dz_T(Ploc(3)+1)/dabs(Vpz))

                particledt = min(advdt(1), advdt(2), advdt(3), &
                                pfdt*dtfrac, delta_time-P(ii,4))

                ! calculate Flux in cell and compare it with the ET flux out of the cell
                if (EvapTrans_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) < 0.d0) then
                ! calculate ET flux volumetrically and compare to
                et_flux = dabs(EvapTrans_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))*dx*dy*dz_T(Ploc(3)+1)

                ! compare total water removed from cell by ET with total water available in cell to arrive at a particle
                ! probability of being captured by roots
                ! water volume in cell
                water_vol = dx*dy*dz_T(Ploc(3)+1)*(Porosity_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) &
                            *Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))

                Zr = curand_uniform(h(ii))

                if (Zr < ((et_flux*particledt)/water_vol)) then   ! check if particle is 'captured' by the roots
                !  this section made atomic since it could inovlve a data race
                !  that is, each thread can only update the ET arrays one at a time

                    temp = atomicAdd(ET_age(1), P(ii,4)*P(ii,6))

                    temp = atomicAdd(ET_mass(1), P(ii,6))

                    if (P(ii,7) == 1.) then
                        temp = atomicAdd(ET_comp(1), P(ii,6))
                    end if

                    if (P(ii,7) == 2.) then
                        temp = atomicAdd(ET_comp(2), P(ii,6))
                    end if

                    if (P(ii,7) == 3.) then
                        temp = atomicAdd(ET_comp(3), P(ii,6))
                    end if

                    temp = atomicAdd(ET_np(1), idnint(one))

                    ! outputting spatially distributed ET information
                    ! here it is a problem, probably have to be done after transfer.
                    ! can keep it here but only for the area except overlap Zone
                    ! temp = atomicAdd(C(6,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),one)

                    ! temp = atomicAdd(C(7,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,6)) ! particle mass added to ET

                    ! temp = atomicAdd(C(8,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,4)*P(ii,6))  ! mass weighted age

                    ! temp = atomicAdd(C(9,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,7)*P(ii,6))  ! mass weighted contribution

                    ! now remove particle from domain
                    P(ii,8) = 0.d0
                    ! flag as exiting via ET
                    P(ii,10) = 2.d0
                    goto 999

                end if
                end if

                ! Advect particle to new location using Euler advection until next time
                P(ii,1) = P(ii,1) + particledt * Vpx
                P(ii,2) = P(ii,2) + particledt * Vpy
                P(ii,3) = P(ii,3) + particledt * Vpz
                P(ii,4) = P(ii,4) + particledt

                Ltemp = dsqrt((particledt*Vpx)**2 + (particledt*Vpy)**2 + &
                            (particledt*Vpz)**2)

                ! Molecular Diffusion
                if (moldiff > 0.d0) then
                    z1 = 2.d0*dsqrt(3.d0)*(curand_uniform(h(ii))-0.5d0)
                    z2 = 2.d0*dsqrt(3.d0)*(curand_uniform(h(ii))-0.5d0)
                    z3 = 2.d0*dsqrt(3.d0)*(curand_uniform(h(ii))-0.5d0)

                    P(ii,1) = P(ii,1) + z1 * dsqrt(moldiff*2.d0*particledt)
                    P(ii,2) = P(ii,2) + z2 * dsqrt(moldiff*2.d0*particledt)
                    P(ii,3) = P(ii,3) + z3 * dsqrt(moldiff*2.d0*particledt)

                    Ltemp = Ltemp + &
                                dsqrt((z1*dsqrt(moldiff*2.d0*particledt))**2 + &
                                    (z2*dsqrt(moldiff*2.d0*particledt))**2 + &
                                    (z3*dsqrt(moldiff*2.d0*particledt))**2)
                end if
                P(ii,11) = P(ii,11) + Ltemp
                ! placeholder for other interactions; potentially added later
                !
                ! place to track saturated / groundwater time if needed
                if(Saturation_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1) == 1.) then
                    P(ii,5) = P(ii,5) + particledt
                    P(ii,12) = P(ii,12) + Ltemp
                end if

                if (nind > 0) then
                    itemp=idnint(Ind_T(Ploc(1)+1,Ploc(2)+1,Ploc(3)+1))
                    if(itemp > 0 .and. itemp <= nind) then
                        P(ii,12+itemp) = P(ii,12+itemp) + particledt
                        P(ii,12+nind+itemp) = P(ii,12+nind+itemp) + Ltemp
                    end  if
                end if

                if (reflect) then
                ! we can choose to reflect the particle or not if it is out of
                ! the whole modeling domain. g means the golbal boundary.
                ! currently, we should keep reflect true.
                ! simple reflection boundary
                    if (P(ii,3) >= Zgmax) P(ii,3) = Zgmax- (P(ii,3) - Zgmax)
                    if (P(ii,1) >= Xgmax) P(ii,1) = Xgmax- (P(ii,1) - Xgmax)
                    if (P(ii,2) >= Ygmax) P(ii,2) = Ygmax- (P(ii,2) - Ygmax)
                    if (P(ii,2) <= Ygmin) P(ii,2) = Ygmin+ (Ygmin - P(ii,2))
                    if (P(ii,3) <= Zgmin) P(ii,3) = Zgmin+ (Zgmin - P(ii,3))
                    if (P(ii,1) <= Xgmin) P(ii,1) = Xgmin+ (Xgmin - P(ii,1))
                end if

                if ((P(ii,1) <  Xmin).or.(P(ii,2) <  Ymin).or.(P(ii,3) < Zmin).or. &
                    (P(ii,1) >= Xmax).or.(P(ii,2) >= Ymax).or.(P(ii,3) > Zmax).or. &
                    (P(ii,1) <  Xgmin).or.(P(ii,2) <  Ygmin).or.(P(ii,3) < Zgmin).or. &
                    (P(ii,1) >= Xgmax).or.(P(ii,2) >= Ygmax).or.(P(ii,3) > Zgmax)) then
                    ! unavoidable particle loss, this should be written into the log file later.
                    ! flag particle as inactive
                    P(ii, 8) = 0.d0
                    ! flag as exiting via loss
                    P(ii,10) = 3.d0
                    goto 999
                end if

            end do ! end of do-while loop for particle time to next time
            999 continue ! where we go if the particle is out of bounds

            ! concentration routine
            ! Find the "adjacent" "cell corresponding to the particle's location
            Ploc(1) = floor(P(ii,1) / dx)
            Ploc(2) = floor(P(ii,2) / dy)

            !Z = 0.d0
            !do k = 1, nz
            !    Z = Z + dz_T(k)
            !    if (Z >= P(ii,3)) then
            !        Ploc(3) = k - 1
            !        exit
            !    end if
            !end do

            ! Zone/neighbor identification for cuda-aware transfer.
            ! keep an eye for ET particles
            P(ii,13+2*nind) = -1.
            if(P(ii,10) /= 3.) then ! otherwise, particle is out of domain
                if(Zone_de(Ploc(1)+1,Ploc(2)+1) /= rank) then
                    if(P(ii,8) == 1. .or. (P(ii,8) == 0. .and. P(ii,10) == 2.)) &
                    P(ii,13+2*nind) = Zone_de(Ploc(1)+1,Ploc(2)+1)
                end if
            endif
            ! Hence, particles which will be sent to neighbors has been labeled

            ! Transfer local coordinates to global
            P(ii,1) = P(ii,1) + dble(ix1)*dx
            P(ii,2) = P(ii,2) + dble(iy1)*dy

        end if

    end subroutine particles_independent_T
    #endif
    #endif

    attributes(global) subroutine Update_C_Array(P,dz,nz,ix1,iy1, &
        mean_age,mean_comp,total_mass,np_active)

        implicit none
        real(8),intent(inout):: P(:,:)
        real(8),intent(in):: dz(:)
        real(8),intent(inout):: mean_age(:),total_mass(:),mean_comp(:)
        integer,value:: nz,ix1,iy1,np_active
        integer:: Ploc(3), ii, k
        real(8):: one, Z, temp

        ii = (blockIdx%x - 1) * blockDim%x + threadIdx%x
        one = 1.d0

        if(ii <= np_active) then

            ! Transfer global to local
            P(ii,1) = P(ii,1) - dble(ix1)*dx
            P(ii,2) = P(ii,2) - dble(iy1)*dy

            ! Find the "adjacent" "cell corresponding to the particle's location
            Ploc(1) = floor(P(ii,1) / dx)
            Ploc(2) = floor(P(ii,2) / dy)
            ! if(Ploc(1) >= nnx1 + buff) Ploc(1) = nnx1 + buff - 1
            ! if(Ploc(2) >= nny1 + buff) Ploc(2) = nny1 + buff - 1

            Z = 0.d0
            do k = 1, nz
                Z = Z + dz(k)
                if (Z >= P(ii,3)) then
                    Ploc(3) = k - 1
                    exit
                end if
            end do

            if(P(ii,8) == 0. .and. P(ii,10) == 2.) then
                temp = atomicAdd(C_de(6,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),one)
                temp = atomicAdd(C_de(7,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,6))  ! particle mass added to ET
                temp = atomicAdd(C_de(8,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,4)*P(ii,6))  ! mass weighted age
                temp = atomicAdd(C_de(9,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,7)*P(ii,6))  ! mass weighted contribution
            end if

            temp = atomicAdd(C_de(1,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,8)*P(ii,11)*P(ii,6))
            temp = atomicAdd(C_de(2,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,8)*P(ii,4)*P(ii,6))
            temp = atomicAdd(C_de(4,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,8)*P(ii,5)*P(ii,6))
            temp = atomicAdd(C_de(3,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,8)*P(ii,6))
            temp = atomicAdd(C_de(5,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,8)*P(ii,12)*P(ii,6))

            !--------------------------------------
            ! increment mean age, composition and mass
            temp = atomicAdd(mean_age,   P(ii,8)*P(ii,4)*P(ii,6))
            temp = atomicAdd(mean_comp,  P(ii,8)*P(ii,7)*P(ii,6))
            temp = atomicAdd(total_mass, P(ii,8)*P(ii,6))

            !--------------------------------------
            P(ii,1) = P(ii,1) + dble(ix1)*dx
            P(ii,2) = P(ii,2) + dble(iy1)*dy

        end if

    end subroutine Update_C_Array

end module particle_loop