module eco_particle_loop
    ! attributes(global) subroutine particles_independent

    use cudafor
    use curand_device
    use mrand, only: handle
    use variable_list, only: Zone_T, P_de
    use variable_list, only: dx, dy, pfdt, N_send, nz, ix1, iy1
    use variable_list, only: moldiff, denh2o, dtfrac, nind

    use variable_list, only: out_age_de,out_mass_de,out_comp_de,out_np_de
    use variable_list, only: et_age_de,et_mass_de,et_comp_de,et_np_de

    use variable_list, only: EvapTrans_T,Saturation_T,Porosity_T
    use variable_list, only: Vx_T,Vy_T,Vz_T,Ind_T,dz_T,P_T
    use variable_list, only: xgmin,ygmin,zgmin,xgmax,ygmax,zgmax

contains

    attributes(global) subroutine particles_independent( &
        xmin,ymin,zmin,xmax,ymax,zmax, &
        offset,np_active,reflect,rank)

        implicit none

        real(8),value:: xmin,ymin,zmin,xmax,ymax,zmax
        integer,value:: np_active,offset,rank
        logical,value:: reflect

        integer:: ii,k,Ploc(3),ii_l
        real(8):: Vpx,Vpy,Vpz,Z,particledt,delta_time, &
        advdt(3),z1,z2,z3,temp,one

        real(8),shared:: gl(256,2)

        type(curandStateXORWOW):: hh

        !--------------------------------------
        one = 1.d0
        ii = offset + (blockIdx%x - 1) * blockDim%x + threadIdx%x
        ii_l = threadIdx%x

        hh = handle(ii)
        !--------------------------------------
        if(P_T(ii,8) == 1. .and. ii <= offset + np_active) then

            delta_time = 0.d0

            ! Transfer global to local
            P_de(ii,1) = P_T(ii,1) - dble(ix1)*dx
            P_de(ii,2) = P_T(ii,2) - dble(iy1)*dy
            ! at this moment, after exchange, overlap zones are empty
            ! pay careful attention to BC

            delta_time = P_T(ii,4) + pfdt

            do while (P_T(ii,4) < delta_time)

                ! Find the "adjacent" cell corresponding to the particle's location
                ! FLOOR(A) returns the greatest integer less than or equal to X.
                Ploc(1) = floor(P_T(ii,1) / dx)
                Ploc(2) = floor(P_T(ii,2) / dy)
                ! if(Ploc(1) >= nnx1 + buff) Ploc(1) = nnx1 + buff - 1
                ! if(Ploc(2) >= nny1 + buff) Ploc(2) = nny1 + buff - 1

                Z = 0.d0
                do k = 1, nz
                    Z = Z + dz_T(k)
                    if (Z >= P_T(ii,3)) then
                        Ploc(3) = k - 1
                        exit
                    end if
                end do

                Ploc(1) = Ploc(1) + 1
                Ploc(2) = Ploc(2) + 1
                Ploc(3) = Ploc(3) + 1

                gl(ii_l,1) = Saturation_T(Ploc(1),Ploc(2),Ploc(3))
                gl(ii_l,2) = Porosity_T(Ploc(1),Ploc(2),Ploc(3))

                if(gl(ii_l,1) <= 0.d0) then
                    ! the problem is you cannot check if the particle has been in the inactive
                    ! area after the last do while iteration.
                    ! but it can be checked in the next do loop in the next timestep.
                    ! however, this will make an inactive particle as active until next do loop.
                    ! make sure there is no out of boundary during period.
                    P_de(ii,8) = 0.d0
                    ! flag as inactive due to inactive cells
                    P_de(ii,10) = 4.d0
                    goto 999
                end if

                ! check to make sure particles are in central part of the domain and if not
                ! apply some boundary condition to them
                ! check if particles are in domain, need to expand this to include better treatment of BC's
                if ((P_T(ii,1) < Xmin).or.(P_T(ii,2) < Ymin).or.(P_T(ii,3) < Zmin).or. &
                    (P_T(ii,1) >= Xmax).or.(P_T(ii,2) >= Ymax).or.(P_T(ii,3) >= (Zmax-dz_T(nz)))) then

                if ((P_T(ii,3) >= Zmax-(dz_T(nz)*0.5d0)).and. &
                    (gl(ii_l,1) == 1.).and.(Vz_T(Ploc(1),Ploc(2),Ploc(3)) > 0.d0)) then

                    temp = atomicAdd(Out_age_de(1), P_T(ii,4)*P_T(ii,6))
                    temp = atomicAdd(Out_mass_de(1), P_T(ii,6))

                    if (P_T(ii,7) == 1.) then
                        temp = atomicAdd(Out_comp_de(1), P_T(ii,6))
                    end if

                    if (P_T(ii,7) == 2.) then
                        temp = atomicAdd(Out_comp_de(2), P_T(ii,6))
                    end if

                    if (P_T(ii,7) == 3.) then
                        temp = atomicAdd(Out_comp_de(3), P_T(ii,6))
                    end if

                    temp = atomicAdd(Out_np_de(1), idnint(one))

                    ! flag particle as inactive
                    P_de(ii,8) = 0.d0
                    ! flag as exiting via Outflow
                    P_de(ii,10) = 1.d0
                    goto 999

                end if
                ! otherwise we just leave it in the domain to reflect
                end if

                ! Find each particle's factional cell location
                advdt(1) = (P_T(ii,1) - dble(Ploc(1)-1)*dx)  / dx
                advdt(2) = (P_T(ii,2) - dble(Ploc(2)-1)*dy)  / dy

                Z = 0.d0
                do k = 1, Ploc(3)-1
                    Z = Z + dz_T(k)
                end do
                advdt(3) = (P_T(ii,3) - Z) / dz_T(Ploc(3))

                ! Calculate local particle velocity using linear interpolation,
                ! converting darcy flux to average linear velocity

                Vpx = ((1.-advdt(1))*Vx_T(Ploc(1),Ploc(2),Ploc(3)) &
                        + Vx_T(Ploc(1)+1,Ploc(2),Ploc(3))*advdt(1)) &
                        /(gl(ii_l,2)*gl(ii_l,1))

                Vpy = ((1.-advdt(2))*Vy_T(Ploc(1),Ploc(2),Ploc(3)) &
                        + Vy_T(Ploc(1),Ploc(2)+1,Ploc(3))*advdt(2)) &
                        /(gl(ii_l,2)*gl(ii_l,1))

                Vpz = ((1.-advdt(3))*Vz_T(Ploc(1),Ploc(2),Ploc(3)) &
                        + Vz_T(Ploc(1),Ploc(2),Ploc(3)+1)*advdt(3)) &
                        /(gl(ii_l,2)*gl(ii_l,1))

                ! calculate particle dt
                ! check each direction independently
                advdt = pfdt
                if (Vpx /= 0.) advdt(1) = dabs(dtfrac*(dx/Vpx))
                if (Vpy /= 0.) advdt(2) = dabs(dtfrac*(dy/Vpy))
                if (Vpz /= 0.) advdt(3) = dtfrac*(dz_T(Ploc(3))/dabs(Vpz))

                particledt = min(advdt(1), advdt(2), advdt(3), &
                                pfdt*dtfrac, delta_time-P_T(ii,4))

                ! calculate Flux in cell and compare it with the ET flux out of the cell
                if (EvapTrans_T(Ploc(1),Ploc(2),Ploc(3)) < 0.d0) then
                ! calculate ET flux volumetrically and compare to
                z1 = dabs(EvapTrans_T(Ploc(1),Ploc(2),Ploc(3)))*dx*dy*dz_T(Ploc(3))

                ! compare total water removed from cell by ET with total water available in cell to arrive at a particle
                ! probability of being captured by roots
                ! water volume in cell
                z2 = dx*dy*dz_T(Ploc(3))*(gl(ii_l,2)*gl(ii_l,1))

                if (curand_uniform(hh) < ((z1*particledt)/z2)) then   ! check if particle is 'captured' by the roots
                !  this section made atomic since it could inovlve a data race
                !  that is, each thread can only update the ET arrays one at a time

                    temp = atomicAdd(ET_age_de(1), P_T(ii,4)*P_T(ii,6))

                    temp = atomicAdd(ET_mass_de(1), P_T(ii,6))

                    if (P_T(ii,7) == 1.) then
                        temp = atomicAdd(ET_comp_de(1), P_T(ii,6))
                    end if

                    if (P_T(ii,7) == 2.) then
                        temp = atomicAdd(ET_comp_de(2), P_T(ii,6))
                    end if

                    if (P_T(ii,7) == 3.) then
                        temp = atomicAdd(ET_comp_de(3), P_T(ii,6))
                    end if

                    temp = atomicAdd(ET_np_de(1), idnint(one))

                    ! outputting spatially distributed ET information
                    ! here it is a problem, probably have to be done after transfer.
                    ! can keep it here but only for the area except overlap Zone
                    ! temp = atomicAdd(C(6,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),one)

                    ! temp = atomicAdd(C(7,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,6)) ! particle mass added to ET

                    ! temp = atomicAdd(C(8,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,4)*P(ii,6))  ! mass weighted age

                    ! temp = atomicAdd(C(9,Ploc(1)+1,Ploc(2)+1,Ploc(3)+1),P(ii,7)*P(ii,6))  ! mass weighted contribution

                    ! now remove particle from domain
                    P_de(ii,8) = 0.d0
                    ! flag as exiting via ET
                    P_de(ii,10) = 2.d0
                    goto 999

                end if
                end if

                ! Advect particle to new location using Euler advection until next time
                P_de(ii,1) = P_T(ii,1) + particledt * Vpx
                P_de(ii,2) = P_T(ii,2) + particledt * Vpy
                P_de(ii,3) = P_T(ii,3) + particledt * Vpz
                P_de(ii,4) = P_T(ii,4) + particledt

                temp = dsqrt((particledt*Vpx)**2 + (particledt*Vpy)**2 + &
                            (particledt*Vpz)**2)

                ! Molecular Diffusion
                if (moldiff > 0.d0) then

                    Z = 2.d0*dsqrt(3.d0)

                    z1 = Z*(curand_uniform(hh)-0.5d0)
                    z2 = Z*(curand_uniform(hh)-0.5d0)
                    z3 = Z*(curand_uniform(hh)-0.5d0)

                    Z = dsqrt(moldiff*2.d0*particledt)
                    P_de(ii,1) = P_T(ii,1) + z1 * Z
                    P_de(ii,2) = P_T(ii,2) + z2 * Z
                    P_de(ii,3) = P_T(ii,3) + z3 * Z

                    temp = temp + dsqrt((z1*Z)**2 + (z2*Z)**2 + (z3*Z)**2)
                end if
                P_de(ii,11) = P_T(ii,11) + temp
                ! placeholder for other interactions; potentially added later
                !
                ! place to track saturated / groundwater time if needed
                if(gl(ii_l,1) == 1.) then
                    P_de(ii,5) = P_T(ii,5) + particledt
                    P_de(ii,12) = P_T(ii,12) + temp
                end if

                if (nind > 0) then
                    k=idnint(Ind_T(Ploc(1),Ploc(2),Ploc(3)))
                    if(k > 0 .and. k <= nind) then
                        P_de(ii,12+k) = P_T(ii,12+k) + particledt
                        P_de(ii,12+nind+k) = P_T(ii,12+nind+k) + temp
                    end  if
                end if

                if (reflect) then
                ! we can choose to reflect the particle or not if it is out of
                ! the whole modeling domain. g means the golbal boundary.
                ! currently, we should keep reflect true.
                ! simple reflection boundary
                    if (P_T(ii,3) >= Zgmax) P_de(ii,3) = Zgmax- (P_T(ii,3) - Zgmax)
                    if (P_T(ii,1) >= Xgmax) P_de(ii,1) = Xgmax- (P_T(ii,1) - Xgmax)
                    if (P_T(ii,2) >= Ygmax) P_de(ii,2) = Ygmax- (P_T(ii,2) - Ygmax)
                    if (P_T(ii,2) <= Ygmin) P_de(ii,2) = Ygmin+ (Ygmin - P_T(ii,2))
                    if (P_T(ii,3) <= Zgmin) P_de(ii,3) = Zgmin+ (Zgmin - P_T(ii,3))
                    if (P_T(ii,1) <= Xgmin) P_de(ii,1) = Xgmin+ (Xgmin - P_T(ii,1))
                end if

                if ((P_T(ii,1) <  Xmin).or.(P_T(ii,2) <  Ymin).or.(P_T(ii,3) < Zmin).or. &
                    (P_T(ii,1) >= Xmax).or.(P_T(ii,2) >= Ymax).or.(P_T(ii,3) > Zmax).or. &
                    (P_T(ii,1) <  Xgmin).or.(P_T(ii,2) <  Ygmin).or.(P_T(ii,3) < Zgmin).or. &
                    (P_T(ii,1) >= Xgmax).or.(P_T(ii,2) >= Ygmax).or.(P_T(ii,3) > Zgmax)) then
                    ! unavoidable particle loss, this should be written into the log file later.
                    ! flag particle as inactive
                    P_de(ii, 8) = 0.d0
                    ! flag as exiting via loss
                    P_de(ii,10) = 3.d0
                    goto 999
                end if

            end do ! end of do-while loop for particle time to next time
            999 continue ! where we go if the particle is out of bounds

            ! concentration routine
            ! Find the "adjacent" "cell corresponding to the particle's location
            Ploc(1) = floor(P_T(ii,1) / dx)
            Ploc(2) = floor(P_T(ii,2) / dy)

            Ploc(1) = Ploc(1) + 1
            Ploc(2) = Ploc(2) + 1
            !Z = 0.d0
            !do k = 1, nz
            !    Z = Z + dz_T(k)
            !    if (Z >= P(ii,3)) then
            !        Ploc(3) = k - 1
            !        exit
            !    end if
            !end do

            ! Zone/neighbor identification for cuda-aware transfer.
            ! keep an eye for ET particles
            k = Zone_T(Ploc(1),Ploc(2))
            P_de(ii,13+2*nind) = -1.
            if(P_T(ii,10) /= 3.) then ! otherwise, particle is out of domain
                if(k /= rank) then
                    if(P_T(ii,8) == 1. .or. (P_T(ii,8) == 0. .and. P_T(ii,10) == 2.)) then
                        P_de(ii,13+2*nind) = k
                        temp = atomicAdd(N_send(k+1),idnint(one))
                    endif
                endif
            endif
            ! Hence, particles which will be sent to neighbors has been labeled

            ! Transfer local coordinates to global
            P_de(ii,1) = P_T(ii,1) + dble(ix1)*dx
            P_de(ii,2) = P_T(ii,2) + dble(iy1)*dy

        end if
        handle(ii) = hh
    end subroutine particles_independent

end module eco_particle_loop