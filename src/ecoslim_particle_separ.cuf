module eco_particle_separ

    use cudafor
    use thrust
    use eco_compact_util
    use variable_list, only: holes
    use variable_list, only: dx, dy
    use variable_list, only: startEvent, stopEvent
    use variable_list, only: d_isValid, d_indices
    use variable_list, only: np_active, np, N_inte, N_peri, tPB
    use variable_list, only: xmin3,ymin3,xmax3,ymax3,ix1,iy1
    use variable_list, only: sort_time1,sort_time2,sort_time3,sort_time4,sort_time5
    use variable_list, only: sort_time6,sort_time7,sort_time9,sort_time10

contains

    subroutine separ_particles (separ_flag)

        implicit none

        integer:: istat
        logical,intent(out):: separ_flag

            #if _TIMING == 1
            istat = cudaEventRecord(startEvent,0)
            #endif
        call particles_separation<<<ceiling(dble(np_active)/tPB),tPB>>>(np_active)
            #if _TIMING == 1
            istat = cudaEventRecord(stopEvent,0)
            istat = cudaEventSynchronize(stopEvent)
            istat = cudaEventElapsedTime(sort_time1,startEvent,stopEvent)
            #endif

            #if _TIMING == 1
            istat = cudaEventRecord(startEvent,0)
            #endif
        call thrustscan(d_isValid,np_active,d_indices)
            #if _TIMING == 1
            istat = cudaEventRecord(stopEvent,0)
            istat = cudaEventSynchronize(stopEvent)
            istat = cudaEventElapsedTime(sort_time2,startEvent,stopEvent)
            #endif

            #if _TIMING == 1
            istat = cudaEventRecord(startEvent,0)
            #endif
        N_inte = d_indices(np_active) ! inter is 1 while perip is 0
        N_peri = np_active - N_inte
            #if _TIMING == 1
            istat = cudaEventRecord(stopEvent,0)
            istat = cudaEventSynchronize(stopEvent)
            istat = cudaEventElapsedTime(sort_time3,startEvent,stopEvent)
            #endif

        if(N_peri > 0)then
            if(np_active + N_peri >= np) then
                write(17,*) ' **Warning particles separation out of bound'
                write(17,*) ' **Exiting code gracefully writing restart'
                separ_flag = .true.
                return
            endif

                #if _TIMING == 1
                istat = cudaEventRecord(startEvent,0)
                #endif
            allocate(holes(N_peri))
                #if _TIMING == 1
                istat = cudaEventRecord(stopEvent,0)
                istat = cudaEventSynchronize(stopEvent)
                istat = cudaEventElapsedTime(sort_time4,startEvent,stopEvent)
                #endif

                #if _TIMING == 1
                istat = cudaEventRecord(startEvent,0)
                #endif
            call prepare_holes<<<ceiling(dble(np_active)/tPB),tPB>>>( &
                holes,np_active)
                #if _TIMING == 1
                istat = cudaEventRecord(stopEvent,0)
                istat = cudaEventSynchronize(stopEvent)
                istat = cudaEventElapsedTime(sort_time5,startEvent,stopEvent)
                #endif

                #if _TIMING == 1
                istat = cudaEventRecord(startEvent,0)
                #endif
            call select2np_active<<<ceiling(dble(N_peri)/tPB),tPB>>>( &
                holes,np_active,N_peri)
                #if _TIMING == 1
                istat = cudaEventRecord(stopEvent,0)
                istat = cudaEventSynchronize(stopEvent)
                istat = cudaEventElapsedTime(sort_time6,startEvent,stopEvent)
                #endif

                #if _TIMING == 1
                istat = cudaEventRecord(startEvent,0)
                #endif
            call compaction_inplace<<<ceiling(dble(np_active)/tPB),tPB>>>( &
                holes,0,np_active)
                ! if no compaction, you will need d_isValid and if condition to judge
                ! during the interior particles' movement
                #if _TIMING == 1
                istat = cudaEventRecord(stopEvent,0)
                istat = cudaEventSynchronize(stopEvent)
                istat = cudaEventElapsedTime(sort_time7,startEvent,stopEvent)
                #endif

                #if _TIMING == 1
                istat = cudaEventRecord(startEvent,0)
                #endif
            deallocate(holes)
                #if _TIMING == 1
                istat = cudaEventRecord(stopEvent,0)
                istat = cudaEventSynchronize(stopEvent)
                istat = cudaEventElapsedTime(sort_time9,startEvent,stopEvent)
                #endif

                #if _TIMING == 1
                istat = cudaEventRecord(startEvent,0)
                #endif
            call connect_recv<<<ceiling(dble(N_peri)/tPB),tPB>>>( &
                N_inte,N_peri)
                ! if not connect, ther will be the risk that it is out of particles when do receiving
                #if _TIMING == 1
                istat = cudaEventRecord(stopEvent,0)
                istat = cudaEventSynchronize(stopEvent)
                istat = cudaEventElapsedTime(sort_time10,startEvent,stopEvent)
                #endif
        end if
    end subroutine separ_particles

    attributes(global) subroutine particles_separation(np_active_m)
        implicit none

        integer,value:: np_active_m
        integer:: ii
        real(8):: P_s(2)

        ii = (blockIdx%x - 1) * blockDim%x + threadIdx%x

        if (ii <= np_active_m) then

            P_s(1:2) = P_T(ii,1:2)
            ! P_T is in eco_compact_util

            if(P_s(1) <  xmin3 .or. P_s(2) <  ymin3 .or. &
            P_s(1) >= xmax3 .or. P_s(2) >= ymax3) then
                d_isValid(ii) = 0
                ! perip
            else
                d_isValid(ii) = 1
                ! inter
            end if

        end if
    end subroutine particles_separation

end module eco_particle_separ

