module subdomain_bound
    ! subroutine global_xyz
    ! subroutine local_xyz
    ! subroutine read_restarts
    use cudafor

    use variable_list, only: ppx, qqy, rank, buff, ranknum, kk, tout1
    use variable_list, only: nx_c, ny_c, nz_c
    use variable_list, only: dx_c, dy_c, dz
    use variable_list, only: xgmin_c, xgmax_c, ygmin_c, ygmax_c, zgmin_c, zgmax_c
    use variable_list, only: xmin1_c, xmax1_c, ymin1_c, ymax1_c, zmin1_c, zmax1_c
    use variable_list, only: xmin2_c, xmax2_c, ymin2_c, ymax2_c, zmin2_c, zmax2_c
    use variable_list, only: xmin3_c, xmax3_c, ymin3_c, ymax3_c, zmin3_c, zmax3_c
    use variable_list, only: xgmin, xgmax, ygmin, ygmax, zgmin, zgmax
    use variable_list, only: xmin1, xmax1, ymin1, ymax1, zmin1, zmax1
    use variable_list, only: xmin2, xmax2, ymin2, ymax2, zmin2, zmax2
    use variable_list, only: xmin3, xmax3, ymin3, ymax3, zmin3, zmax3
    use variable_list, only: ix1_c, iy1_c, nnx1_c, nny1_c
    use variable_list, only: ix2_c, iy2_c, nnx2_c, nny2_c
    use variable_list, only: DEM, DEMname, Pnts
    use variable_list, only: np, nind_c, np_active, pid
    use variable_list, only: P, P_de, grid, Zonet_new

contains
    subroutine global_xyz()
        ! get the boundary of the whole domain, only effective here for log purpose
        ! after the call of local_xyz, this group of data are updated to local data
        ! for extra GPU, this group of data will be updated when it is activated
        ! so for GPU help, this will not be invoked after new GPU is activated
        ! for DDC, this should be invoked again once the topology of subdomains changed

        implicit none

        xgmin_c = 0.0d0
        ygmin_c = 0.0d0
        zgmin_c = 0.0d0
        xgmax_c = dble(nx_c)*dx_c
        ygmax_c = dble(ny_c)*dy_c
        zgmax_c = sum(dz)
        ! dz is on cpu and dz_de is on gpu

            #if _TIMING == 1
        write(11,*)
        write(11,*) 'TIMING defined'
            #else
        write(11,*)
        write(11,*) 'TIMING not defined'
            #endif
        write(11,*)
        write(11,*) '## Domain Info'
        write(11,'("xmin:",e12.5," xmax:",e12.5)') xgmin_c, xgmax_c
        write(11,'("ymin:",e12.5," ymax:",e12.5)') ygmin_c, ygmax_c
        write(11,'("zmin:",e12.5," zmax:",e12.5)') zgmin_c, zgmax_c
        write(11,*)

    end subroutine global_xyz

    subroutine local_xyz()

        implicit none

        ! set up subdomain boundaries
        xmin1_c = 0.0d0
        ymin1_c = 0.0d0
        zmin1_c = 0.0d0
        xmax1_c = dble(nnx1_c)*dx_c
        ymax1_c = dble(nny1_c)*dy_c
        zmax1_c = sum(dz)

        xmin2_c = -dble(buff)*dx_c
        ymin2_c = -dble(buff)*dy_c
        zmin2_c = 0.0d0
        xmax2_c = dble(nnx1_c)*dx_c + dble(buff)*dx_c
        ymax2_c = dble(nny1_c)*dy_c + dble(buff)*dy_c
        zmax2_c = sum(dz)

        xmin3_c = dble(buff)*dx_c
        ymin3_c = dble(buff)*dy_c
        zmin3_c = 0.0d0
        xmax3_c = dble(nnx1_c)*dx_c - dble(buff)*dx_c
        ymax3_c = dble(nny1_c)*dy_c - dble(buff)*dy_c
        zmax3_c = sum(dz)

        xgmin_c = xgmin_c - dble(ix1_c)*dx_c
        ygmin_c = ygmin_c - dble(iy1_c)*dy_c
        zgmin_c = 0.0d0
        xgmax_c = xgmax_c - dble(ix1_c)*dx_c
        ygmax_c = ygmax_c - dble(iy1_c)*dy_c
        zgmax_c = sum(dz)

        xgmin = xgmin_c; xgmax = xgmax_c; ygmin = ygmin_c
        ygmax = ygmax_c; zgmin = zgmin_c; zgmax = zgmax_c
        xmin1 = xmin1_c; xmax1 = xmax1_c; ymin1 = ymin1_c
        ymax1 = ymax1_c; zmin1 = zmin1_c; zmax1 = zmax1_c
        xmin2 = xmin2_c; xmax2 = xmax2_c; ymin2 = ymin2_c
        ymax2 = ymax2_c; zmin2 = zmin2_c; zmax2 = zmax2_c
        xmin3 = xmin3_c; xmax3 = xmax3_c; ymin3 = ymin3_c
        ymax3 = ymax3_c; zmin3 = zmin3_c; zmax3 = zmax3_c

    end subroutine local_xyz

    subroutine write_restarts ()

        implicit none
        character(200) writenum

        write(writenum,'(i10.10)') kk

        P(1:np_active,:) = P_de(1:np_active,:)

        open(116,file='Particle_restart.'//trim(adjustl(ranknum))//'.'//trim(adjustl(writenum))//'.bin', &
        form='unformatted',access='stream')

        write(116) np_active
        write(116) pid
        write(116) P(1:np_active,1:nind_c*2+17)

        close(116)

    end subroutine write_restarts

    subroutine read_restarts ()

        implicit none
        character(200) restartnum

        write(restartnum,'(i10.10)') tout1

        write(11,*) 'Reading particle restart File: &
        Particle_restart.'//trim(adjustl(ranknum))//'.'//trim(adjustl(restartnum))//'.bin'

        open(116,file='Particle_restart.'//trim(adjustl(ranknum))//'.'//trim(adjustl(restartnum))//'.bin', &
        form='unformatted',access='stream')

        read(116) np_active
        read(116) pid

        if (np_active < np) then   ! check if we have particles left

            read(116) P(1:np_active,1:nind_c*2+17)
            close(116)

            write(11,*) 'RESTART np_active:', np_active
            write(11,*) 'RESTART pid:', pid

        else
            close(116)
            write(11,*) ' **Warning restart IC input but no paricles left'
            write(11,*) ' **Exiting code *not* (over)writing restart'
            stop
        end if

        P_de(1:np_active,:) = P(1:np_active,:)

    end subroutine read_restarts

end module subdomain_bound