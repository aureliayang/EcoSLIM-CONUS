module subdomain_bound
    ! subroutine global_xyz
    ! subroutine local_xyz
    ! subroutine DEM_for_visual
    ! subroutine read_restarts
    use cudafor

    use variable_list, only: ppx, qqy, rank, buff
    use variable_list, only: nx_c, ny_c, nz_c
    use variable_list, only: dx, dy, dz
    use variable_list, only: Xgmin, Xgmax, Ygmin, Ygmax, Zgmin, Zgmax
    use variable_list, only: Xmin1, Xmax1, Ymin1, Ymax1, Zmin1, Zmax1
    use variable_list, only: Xmin2, Xmax2, Ymin2, Ymax2, Zmin2, Zmax2
    use variable_list, only: Xmin3, Xmax3, Ymin3, Ymax3, Zmin3, Zmax3
    use variable_list, only: loadf, restartf, exitedf, logf, ranknum
    use variable_list, only: fh1, fh2
    use variable_list, only: ix1, iy1, nnx1, nny1, ix2, iy2, nnx2, nny2
    use variable_list, only: DEM, DEMname, fname, Pnts
    use variable_list, only: np, nind_c, np_active, pid
    use variable_list, only: P, grid, Zone_de, Zonet_new

contains
    subroutine global_xyz()
        ! get the boundary of the whole domain.
        ! set the names of log files
        ! open loadf (fh1) and output the domain boundary to loadf

        ! loadf (fh1) looks like the log file, recodring all the warning info
        ! restartf (fh2) is used to read and write restart files
        ! exitedf (fh3) is to write files of exited particles, it includes particles for all timesteps.
        ! logf (fh4) is also log file to record the summary of particles of every timestep

        use mpi
        implicit none
        character(200):: message
        integer:: k, ierr

            ! set up domain boundaries
            Xgmin = 0.0d0
            Ygmin = 0.0d0
            Zgmin = 0.0d0
            Xgmax = dble(nx_c)*dx
            Ygmax = dble(ny_c)*dy
            Zgmax = 0.0d0
            do k = 1, nz_c
                Zgmax = Zgmax + dz(k)
            end do

            ! write(loadf,'(a,i5.5,a)') 'Load_info.', rank, '.txt'
            ! write(restartf,'(a,i5.5,a)') 'Particle_restart.',rank,'.bin'
            ! write(exitedf,'(a,i5.5,a)') 'Exited_particles.',rank,'.bin'
            ! write(logf,'(a,i5.5,a)') 'Log_particles.',rank,'.txt'

            ! call MPI_FILE_OPEN(MPI_COMM_SELF,loadf,MPI_MODE_WRONLY+MPI_MODE_CREATE, &
            ! MPI_INFO_NULL,fh1,ierr)

            ! write(message,'(A,A)') '## Domain Info', NEW_LINE(' ')
            ! call MPI_FILE_WRITE(fh1, trim(message), len(trim(message)), &
            ! MPI_CHARACTER, MPI_STATUS_IGNORE, ierr)

            ! write(message,'("Xmin:",e12.5," Xmax:",e12.5,A)') Xgmin, Xgmax, NEW_LINE(' ')
            ! call MPI_FILE_WRITE(fh1, trim(message), len(trim(message)), &
            ! MPI_CHARACTER, MPI_STATUS_IGNORE, ierr)

            ! write(message,'("Ymin:",e12.5," Ymax:",e12.5,A)') Ygmin, Ygmax, NEW_LINE(' ')
            ! call MPI_FILE_WRITE(fh1, trim(message), len(trim(message)), &
            ! MPI_CHARACTER, MPI_STATUS_IGNORE, ierr)

            ! write(message,'("Zmin:",e12.5," Zmax:",e12.5,A)') Zgmin, Zgmax, NEW_LINE(' ')
            ! call MPI_FILE_WRITE(fh1, trim(message), len(trim(message)), &
            ! MPI_CHARACTER, MPI_STATUS_IGNORE, ierr)

            open(17,file='Load_info.'//trim(adjustl(ranknum))//'.txt')
            #if _TIMING == 1
            write(17,*) 'TIMING defined'
            #else
            write(17,*) 'TIMING not defined'
            #endif
            write(17,*)
            write(17,*) '## Domain Info'
            write(17,'("Xmin:",e12.5," Xmax:",e12.5)') Xgmin, Xgmax
            write(17,'("Ymin:",e12.5," Ymax:",e12.5)') Ygmin, Ygmax
            write(17,'("Zmin:",e12.5," Zmax:",e12.5)') Zgmin, Zgmax
            write(17,*)

    end subroutine global_xyz

    subroutine local_xyz()
        implicit none
        integer:: k

        ! if (rank /= ppx*qqy) then

            ! set up subdomain boundaries
            Xmin1 = 0.0d0
            Ymin1 = 0.0d0
            Zmin1 = 0.0d0
            Xmax1 = dble(nnx1)*dx
            Ymax1 = dble(nny1)*dy
            Zmax1 = 0.0d0
            do k = 1, nz_c
                Zmax1 = Zmax1 + dz(k)
            end do

            Xmin2 = -dble(buff)*dx
            Ymin2 = -dble(buff)*dy
            Zmin2 = 0.0d0
            Xmax2 = dble(nnx1)*dx + dble(buff)*dx
            Ymax2 = dble(nny1)*dy + dble(buff)*dy
            Zmax2 = 0.0d0
            do k = 1, nz_c
                Zmax2 = Zmax2 + dz(k)
            end do

            Xmin3 = dble(buff)*dx
            Ymin3 = dble(buff)*dy
            Zmin3 = 0.0d0
            Xmax3 = dble(nnx1)*dx - dble(buff)*dx
            Ymax3 = dble(nny1)*dy - dble(buff)*dy
            Zmax3 = 0.0d0
            do k = 1, nz_c
                Zmax3 = Zmax3 + dz(k)
            end do

            Xgmin = Xgmin - dble(ix1)*dx
            Ygmin = Ygmin - dble(iy1)*dy
            Zgmin = 0.0d0
            Xgmax = Xgmax - dble(ix1)*dx
            Ygmax = Ygmax - dble(iy1)*dy
            Zgmax = 0.0d0
            do k = 1, nz_c
                Zgmax = Zgmax + dz(k)
            end do
        ! end if
    end subroutine local_xyz

    subroutine read_restarts ()
        use mpi
        implicit none

        integer:: ierr
        character(200):: message

        if (rank /= ppx*qqy) then

            write(message,'(a,a,i3.3,a,a)') 'Reading particle restart File:', &
            'Particle_restart.',rank,'.bin',new_line(' ')
            call MPI_FILE_WRITE(fh1, trim(message), len(trim(message)), &
                                MPI_CHARACTER, MPI_STATUS_IGNORE, ierr)

            call MPI_FILE_OPEN(MPI_COMM_SELF,restartf,MPI_MODE_RDONLY, &
                                MPI_INFO_NULL,fh2,ierr)

            call MPI_FILE_READ(fh2,np_active,1,MPI_INTEGER,MPI_STATUS_IGNORE,ierr)
            call MPI_FILE_READ(fh2,pid,1,MPI_INTEGER,MPI_STATUS_IGNORE,ierr)

            if (np_active < np) then   ! check if we have particles left
                call MPI_FILE_READ(fh2,P(1:np_active,1:nind_c*2+17),np_active*(nind_c*2+17), &
                                    MPI_DOUBLE_PRECISION,MPI_STATUS_IGNORE,ierr)
                call MPI_FILE_CLOSE(fh2, ierr)

                write(message,'(a,i10.10,a)') 'RESTART np_active:',np_active,new_line(' ')
                call MPI_FILE_WRITE(fh1, trim(message), len(trim(message)), &
                                    MPI_CHARACTER, MPI_STATUS_IGNORE, ierr)
                write(message,'(a,i10.10,a)') 'RESTART pid:',pid,new_line(' ')
                call MPI_FILE_WRITE(fh1, trim(message), len(trim(message)), &
                                    MPI_CHARACTER, MPI_STATUS_IGNORE, ierr)
            else
                call MPI_FILE_CLOSE(fh2, ierr)
                write(message,'(A,A)') ' **Warning restart IC input but no paricles left',new_line(' ')
                call MPI_FILE_WRITE(fh1, trim(message), len(trim(message)), &
                                    MPI_CHARACTER, MPI_STATUS_IGNORE, ierr)
                write(message,'(A,A)') ' **Exiting code *not* (over)writing restart',new_line(' ')
                call MPI_FILE_WRITE(fh1, trim(message), len(trim(message)), &
                                    MPI_CHARACTER, MPI_STATUS_IGNORE, ierr)
                stop
            end if

            ! read topology
            open(17,file='topology_restart.'//trim(adjustl(ranknum)),FORM='unformatted',access='stream')
                read(17) ix1, iy1, nnx1, nny1, ix2, iy2, nnx2, nny2
            close(17)  ! Topology
        else
            !open(19,file='manager_grid_zonet_new', FORM='unformatted',access='stream')
            !    read(19) grid
            !    read(19) Zonet_new
            !close(19)  ! manager
        end if
    end subroutine read_restarts

    subroutine read_Zone_de()
        implicit none

        if (rank /= ppx*qqy) then
            write(ranknum,'(i5.5)') rank
            open(18,file='Zone_de_restart.'//trim(adjustl(ranknum)),FORM='unformatted',access='stream')
                ! read(18) Zone_de
            close(18)  ! Zone_de
        endif

    end subroutine read_Zone_de

end module subdomain_bound