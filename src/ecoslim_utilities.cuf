module utilities
    ! subroutine copy_grid
    ! attributes(global) subroutine scan_zone

    use cudafor
    use variable_list, only: Zone_T, grid
    use variable_list, only: nx_c, ny_c, buff, rank, runname
    use variable_list, only: nnx1_c,nny1_c,nnx2_c,nny2_c,ix1_c,iy1_c,ix2_c,iy2_c
    use variable_list, only: nnx1,nny1,nnx2,nny2,ix1,iy1,ix2,iy2
    use variable_list, only: Zonet_new, ppx, qqy, ranknum

contains
    subroutine copy_grid(map_sub)

        implicit none
        integer,intent(in):: map_sub

        ix1_c  = grid(map_sub+1,1)
        nnx1_c = grid(map_sub+1,3)
        iy1_c  = grid(map_sub+1,2)
        nny1_c = grid(map_sub+1,4)

        ix2_c = ix1_c - buff; nnx2_c = nnx1_c + 2*buff
        iy2_c = iy1_c - buff; nny2_c = nny1_c + 2*buff

        if(ix1_c == 0) then
            ix2_c  = ix1_c
            nnx2_c = nnx2_c - buff
        endif
        if(ix1_c+nnx1_c == nx_c) nnx2_c = nnx2_c - buff

        if(iy1_c == 0) then
            iy2_c  = iy1_c
            nny2_c = nny2_c - buff
        endif
        if(iy1_c+nny1_c == ny_c) nny2_c = nny2_c - buff

        nnx1 = nnx1_c
        nny1 = nny1_c
        ix1 = ix1_c
        iy1 = iy1_c

        nnx2 = nnx2_c
        nny2 = nny2_c
        ix2 = ix2_c
        iy2 = iy2_c
    end subroutine copy_grid

    attributes(global) subroutine scan_zone(buff_m, &
        neigh_list_m,rank_m,t_rank_m)

        implicit none
        integer,intent(out):: neigh_list_m(:)
        integer,value:: buff_m,rank_m,t_rank_m
        integer:: ii,i,j,temp,length
        integer:: nx, ny, mod_temp

        ! 1  2  3  4  5  6
        ! 0  1  2  3  4  5
        ! -1 -1 -1 -1 -1 -1  5  6
        ! -1  1  1  1  1 -1  4  5
        ! -1  1  1  1  1 -1  3  4
        ! -1  1  1  1  1 -1  2  3
        ! -1  1  1  1  1 -1  1  2
        ! -1 -1 -1 -1 -1 -1  0  1
        ! nnx1 = 4; nny1 = 4; buff_m = 1
        ! the (i,j) is that in Zone_de

        ii = (blockIdx%x - 1) * blockDim%x + threadIdx%x
        nx = nnx1 + 2*buff_m
        ny = nny1 + 2*buff_m
        mod_temp = mod(ii,nx)
        length = nx * ny
        ! this is the total length of zone array when it was transformed to 1D

        if(ii <= length) then
            if(mod_temp == 0) then
                j = ii/nx - buff_m ! 2 - 1
                i = nnx1 + buff_m  ! 4 + 1
            else
                j = ii/nx - buff_m + 1
                i = mod_temp - buff_m
            end if
        end if

        if(ii <= t_rank_m) neigh_list_m(ii) = 0
        ! for this scan, we only have t_rank_m elements
        ! in fact, ppx*qqy is passed to t_rank_m
        ! map_sub is passed to rank_m

        if(ii <= length) then
            if(Zone_T(i,j) >= 0 .and. Zone_T(i,j) /= rank_m) then
            ! since there is -1 for halo
                temp = atomicAdd(neigh_list_m(Zone_T(i,j)+1),1)
            end if
        end if

        if(ii <= t_rank_m .and. neigh_list_m(ii) > 0) neigh_list_m(ii) = 1
    end subroutine scan_zone

    subroutine file_open()
        use mpi
        implicit none

        open(17,file='Timing_info.'//trim(adjustl(ranknum))//'.txt')

        open(19,file='Exited_particles.'//trim(adjustl(ranknum))//'.bin', &
        form='unformatted',access='stream')

        open(20,file='Log_particles.'//trim(adjustl(ranknum))//'.txt')
        write(20,*) ' **** Transient Simulation Particle Accounting ****'
        write(20,*) ' Timestep PFTimestep OutStep Time Mean_Age Mean_Comp Mean_Mass &
                      Total_Mass PrecipIn ETOut NP_PrecipIn NP_ETOut NP_QOut NP_filtered &
                      N_peripheric N_interior N_exit sum_send sum_recv'

        if(rank == 0) then

            open(13,file=trim(runname)//'_ET_output.txt')
            write(13,*) 'TIME ET_age ET_comp1 ET_comp2 ET_comp3 ET_mass ET_Np'

            open(15,file=trim(runname)//'_flow_output.txt')
            write(15,*) 'TIME Out_age Out_comp1 outcomp2 outcomp3 Out_mass Out_NP'

            open(16,file=trim(runname)//'_PET_balance.txt')
            write(16,*) 'TIME P[kg] ET[kg]'

        endif
    end subroutine file_open

    subroutine file_close()
        implicit none
        if(rank == 0) then
            flush(13);close(13)
            flush(15);close(15)
            flush(16);close(16)
        end if
        flush(11);close(11)
        flush(17);close(17)
        flush(19);close(19)
        flush(20);close(20)
        flush(30);close(30)
    end subroutine file_close

    subroutine read_grid_Zone()
        implicit none

        integer:: Zonet_new_c(-buff+1:nx_c+buff,-buff+1:ny_c+buff)
        integer:: grid_c(ppx*qqy,4)

        open(18,file='EcoSLIM_restart.'//trim(adjustl(ranknum)),FORM='unformatted',access='stream')
            read(18) grid_c
            read(18) Zonet_new_c
        close(18)

        grid = grid_c
        Zonet_new = Zonet_new_c

    end subroutine read_grid_Zone

    subroutine write_grid_Zone()
        implicit none

        integer:: Zonet_new_c(-buff+1:nx_c+buff,-buff+1:ny_c+buff)
        integer:: grid_c(ppx*qqy,4)

        grid_c = grid
        Zonet_new_c = Zonet_new

        open(18,file='EcoSLIM_restart.'//trim(adjustl(ranknum)),form='unformatted',access='stream')
            write(18) grid_c
            write(18) Zonet_new_c
        close(18)

    end subroutine write_grid_Zone

    ! write/read P
    ! max_rank
    ! GPUs three arrays
    ! map_sub

end module utilities