module variable_list

    ! subroutine allocate_arrays_temp
    ! subroutine allocate_arrays_const

!--------------------------------------------------------------------
    ! P = Particle array [np,attributes]
    ! np = Number of particles
    ! P(np,1) = X coordinate [L]
    ! P(np,2) = Y coordinate [L]
    ! P(np,3) = Z coordinate [L]
    ! P(np,4) = Particle residence time [T]
    ! P(np,5) = Saturated particle residence time [T]
    ! P(np,6) = Particle mass; assigned via preciptiation or snowmelt rate (Evap_Trans*density*volume*dT)
    ! P(np,7) = Particle source (1=IC, 2=rain, 3=snowmelt, 4=irrigation...)
    ! P(np,8) = Particle Status (1=active, 0=inactive)
    ! P(np,9) = concentration
    ! P(np,10) = Exit status (1=outflow, 2=ET...)

    ! P(np,11) = Length of flow path [L]
    ! P(np,12) = Length of saturated flow path [L]
    ! P(np,13:(12+nind)) = Length of flow path in indicator i [L]
    ! P(np,(13+nind):(12+nind*2)) = particle age in indicator i [T]

    ! P(np,13+nind*2) = Particle Number (This is a unique integer identifier for the particle)
    ! P(np,14+nind*2) = Partical Initial X coordinate [L]
    ! P(np,15+nind*2) = Partical Initial Y coordinate [L]
    ! P(np,16+nind*2) = Partical Initial Z coordinate [L]
    ! P(np,17+nind*2) = Time that particle was added [T]

!--------------------------------------------------------------------
    use mpi
    use cudafor
    use mrand, only: handle
!--------------------------------------------------------------------
    integer:: rank, t_rank, ierr, status(MPI_STATUS_SIZE) ! used for MPI

    integer:: world_group, work_group, work_comm, max_rank, rq2

    integer,allocatable:: rq1(:), work_ranks(:)

    character(len=MPI_MAX_PROCESSOR_NAME):: hostname

    integer:: deviceID, namelength

    integer(MPI_OFFSET_KIND):: offset

    character(300):: message

    character(200):: runname, pname, DEMname, vtk_file, Indname

    integer:: nx_c, ny_c, nz_c, nzclm, nCLMsoil
    ! number of cells in the domain and cells+1 in x, y, and z directions

    integer:: ppx, qqy ! split in x and y directions
    ! limit to 2^n in this code

    integer:: np_ic, np

    integer:: n_constituents
    ! number of timesteps ParFlow; numer of C vectors written for VTK output

    character(20),allocatable:: conc_header(:)
    ! name for variables written in the C array above.  Dimensioned as l above.

    real(8),constant:: dx, dy, pfdt, dtfrac, denh2o, moldiff
    real(8):: dx_c, dy_c, pfdt_c, dtfrac_c, denh2o_c, moldiff_c

    integer,constant:: nattri, nind, nx, ny, nz
    integer:: nattri_c, nind_c

    integer:: pft1, pft2, tout1, pfnt, n_cycle
    ! parflow start and stop file numbers number of ParFlow timesteps
    ! flag specifying the number for the first output write (0= start with pft1)
    ! number of timestep cycles

    integer:: kk, pfkk, outkk
    ! Counter for the file numbers starts at pft1
    ! Counter for the output writing

    integer:: ipwrite, ibinpntswrite, etwrite, icwrite

    real(8),allocatable:: Time_Next(:)
    ! Vector of real times at which ParFlow dumps outputs

    real(8):: Time_first
    ! initial timestep for Parflow ((pft1-1)*pfdt)

    integer:: iflux_p_res, np_active, i_added_particles
    ! number of particles for intial pulse IC, total, and running active

    real(8),allocatable:: DEM(:,:) ! DEM and grid points for concentration output
    real(8),allocatable:: Pnts(:,:) ! use in vtk

    integer:: pid

    integer:: i, j, k, l, ik, ji, ij, ii

    character(200) filenum, filenumout, fname, ranknum
    character(9), parameter:: dsetname = 'hdf5_data'
    ! runname = SLIM runname
    ! filenum = ParFlow file number
    ! filenumout = File number for Ecoslim writing
    ! pname = ParFlow output runname
    ! fname = Full name of a ParFlow's output
    ! vtk_file = concentration file
    ! DEMname = DEM file name

    real(8):: V_mult
    ! Multiplier for forward/backward particle tracking
    ! If V_mult = 1, forward tracking
    ! If V_mult = -1, backward tracking
    ! density of water (M/L3), molecular diffusion (L2/T), fractionation

    logical:: clmtrans, clmfile, reflect, separate, spinup  ! reflect has not been read
    ! logical for mode of operation with CLM, will add particles with P-ET > 0
    ! will remove particles if ET > 0
    ! clmfile governs reading of the full CLM output, not just evaptrans

    real(8):: xmin1_c, xmax1_c, ymin1_c, ymax1_c, zmin1_c, zmax1_c
    real(8):: xmin2_c, xmax2_c, ymin2_c, ymax2_c, zmin2_c, zmax2_c
    real(8):: xmin3_c, xmax3_c, ymin3_c, ymax3_c, zmin3_c, zmax3_c
    real(8):: xgmin_c, xgmax_c, ygmin_c, ygmax_c, zgmin_c, zgmax_c

    real(8),constant:: xmin1, xmax1, ymin1, ymax1, zmin1, zmax1
    real(8),constant:: xmin2, xmax2, ymin2, ymax2, zmin2, zmax2
    real(8),constant:: xmin3, xmax3, ymin3, ymax3, zmin3, zmax3
    real(8),constant:: xgmin, xgmax, ygmin, ygmax, zgmin, zgmax

    real(8):: Total_time1, Total_time2, t1, t2, parallel_time, IO_time_write
    real:: IO_time_read, h2d_time, d2h_time
    real:: peri_time, inte_time, exit_time, C_time
    real:: tran_time1=0., tran_time2=0., tran_time3=0., tran_time4=0., tran_time5=0.
    real:: tran_time6=0., tran_time7=0., tran_time8=0., tran_time9=0., tran_time10=0.
    real:: scan_time, thrust_time, copy_time, add2_time, reduce_time = 0.
    real:: sort_time1 = 0., sort_time2 = 0.,sort_time3 = 0.,sort_time4 = 0.,sort_time5 = 0.
    real:: sort_time6 = 0., sort_time7 = 0.,sort_time8 = 0.,sort_time9 = 0.,sort_time10 = 0.
    type(cudaEvent):: startEvent, stopEvent
    ! integers for writing C or point based output

    integer,parameter:: tPB = 256 ! block size, is it the larger the better?
    integer:: fh0, fh1, fh2, fh3, fh4
    character(200):: restartf
    integer:: np_active_log, add_f

    real(8),allocatable,pinned:: P(:,:)
    integer,allocatable,managed:: N_send(:)
    ! the same length as neigh_list, i.e., the total number of subdomains.
    ! it is assembled on GPU in particle loop and used in exchange on CPU.
    integer,allocatable,pinned:: N_recv(:) ! for each subdomain, it has the number of neighbors
    integer:: N_exit, N_peri, N_inte ! a scalar variable.
    ! It is assembled on GPU and is written into binary file each timestep.
    ! it is allocated in particle exchange.
    integer,allocatable,pinned:: out_np_cpu(:),ET_np_cpu(:)
    real(8),allocatable,pinned:: out_age_cpu(:),out_mass_cpu(:),out_comp_cpu(:)
    real(8),allocatable,pinned:: ET_age_cpu(:),ET_mass_cpu(:),ET_comp_cpu(:)
    real(8),allocatable,pinned:: PET_balance(:),PET_balance_da(:)
    real(8),allocatable,pinned:: mean_age(:), mean_comp(:), mean_mass(:), total_mass(:)

    real(8),allocatable,pinned:: Saturation(:,:,:)    ! Saturation (read from ParFlow)
    real(8),allocatable,pinned:: Porosity(:,:,:)      ! Porosity (read from ParFlow)
    real(8),allocatable,pinned:: EvapTrans(:,:,:)     ! CLM EvapTrans (read from ParFlow, [1/T] units)
    real(8),allocatable,pinned:: EvapTrans_da(:,:,:)
    real(8),allocatable,pinned:: CLMvars(:,:,:)     ! CLM Output (read from ParFlow, following single file
                                                  ! CLM output as specified in the manual)
    real(8),allocatable,pinned:: Ind(:,:,:)
    real(8),allocatable,pinned:: Vx(:,:,:), Vy(:,:,:), Vz(:,:,:)
    ! Vx = Velocity x-direction [nx+1,ny,nz] -- ParFlow output
    ! Vy = Velocity y-direction [nx,ny+1,nz] -- ParFlow output
    ! Vz = Velocity z-direction [nx,ny,nz+1] -- ParFlow output

    real(8),allocatable,pinned:: C(:,:,:,:)
    ! Concentration array, in i,j,k with l (first index) as consituent or
    ! property. These are set by user at runtime using input
    real(8),allocatable,pinned:: dz(:)

    integer,parameter:: buff = 1  ! Buffer can be specified by user, for GW 1km or 2km is enough
    integer:: nnx1_c,nny1_c,nnx2_c,nny2_c,ix1_c,iy1_c,ix2_c,iy2_c
    integer,constant:: nnx1,nny1,nnx2,nny2,ix1,iy1,ix2,iy2
    integer,allocatable:: nump(:) ! gather active particles to jusdge if LB
    integer:: transfer, map_sub, LB, th_value
    integer,allocatable:: l_GPUs(:,:), t_GPUs(:), c_GPU(:)

    real(8),allocatable:: Saturation_h5(:,:,:),Porosity_h5(:,:,:)
    real(8),allocatable:: EvapTrans_h5(:,:,:),CLMvars_h5(:,:,:)
    real(8),allocatable:: Vx_h5(:,:,:),Vy_h5(:,:,:),Vz_h5(:,:,:)

    real(8),allocatable:: Saturation_cpu(:,:,:),Porosity_cpu(:,:,:)
    real(8),allocatable:: EvapTrans_cpu(:,:,:),CLMvars_cpu(:,:,:)
    real(8),allocatable:: Vx_cpu(:,:,:),Vy_cpu(:,:,:),Vz_cpu(:,:,:)

!-------------------------------------
    ! GPU variables
    real(8),allocatable,device,target:: P_de(:,:)
    real(8),texture,pointer:: P_T(:,:)
    ! the particle array, not sure if the one on host is necessary

    real(8),allocatable,device:: C_de(:,:,:,:)

    real(8),allocatable,device,target:: Vx_de(:,:,:)
    real(8),allocatable,device,target:: Vy_de(:,:,:)
    real(8),allocatable,device,target:: Vz_de(:,:,:)
    real(8),allocatable,device,target:: dz_de(:)
    real(8),allocatable,device,target:: Ind_de(:,:,:)
    real(8),allocatable,device,target:: Saturation_de(:,:,:)
    real(8),allocatable,device,target:: Porosity_de(:,:,:)
    real(8),allocatable,device,target:: EvapTrans_de(:,:,:)
    real(8),allocatable,device,target:: EvapTrans_da_de(:,:,:)
    real(8),allocatable,device,target:: CLMvars_de(:,:)

    real(8),texture,pointer:: EvapTrans_T(:,:,:),Saturation_T(:,:,:),Porosity_T(:,:,:)
    real(8),texture,pointer:: Vx_T(:,:,:),Vy_T(:,:,:),Vz_T(:,:,:),Ind_T(:,:,:),dz_T(:)
    real(8),texture,pointer:: EvapTrans_da_T(:,:,:),CLMvars_T(:,:)

    real(8),allocatable,device:: PET_balance_de(:),PET_balance_da_de(:)
    ! initialization of PET_balance

    integer,allocatable,device:: out_np_de(:),ET_np_de(:)
    real(8),allocatable,device:: out_age_de(:),out_mass_de(:),out_comp_de(:)
    real(8),allocatable,device:: ET_age_de(:),ET_mass_de(:),ET_comp_de(:)
    real(8),allocatable,device:: mean_age_de(:),mean_comp_de(:),total_mass_de(:)

    real(8),allocatable,device:: P_send(:),P_recv(:)
    real(8),allocatable,managed:: P_exit(:,:)

    integer,allocatable,device,target:: d_isValid(:),d_indices(:),holes(:)
    integer,texture,pointer:: d_isValid_T(:),d_indices_T(:)

    integer,allocatable,managed,target:: Zone_de(:,:)
    integer,texture,pointer:: Zone_T(:,:)

    integer(8),allocatable,device:: p_num(:,:), c_sum(:)
    ! it should use integer(8) for CONUS !!!
    ! p_sum on workers needs to be deallocated
    ! c_sum is only on manager

    integer,allocatable,device:: Zonet_new(:,:)
    ! only on rank ppx*qqy. Zonet_new is written into restart files.

    integer,allocatable,device:: grid(:,:)
    ! grid is on GPU, and should be initialized each time doing DDC as
    ! grid = 0
    ! grid(1,1) = 0;  grid(1,2) = 0
    ! grid(1,3) = nx; grid(1,4) = ny
    ! it is also written into restart files.

    integer,allocatable,managed:: neigh_list(:)
    ! ppx*qqy, and should be initilized at the very beginning
    ! its dimension depends on the initial number of GPUs
!-------------------------------------
contains
    subroutine alloc_arrays_const()

        implicit none

        reflect = .true.

        np_active = 0

        pid = 0

        allocate(grid(ppx*qqy,4),neigh_list(ppx*qqy))
        allocate(work_ranks(t_rank),nump(t_rank),rq1(t_rank))
        allocate(t_GPUs(ppx*qqy),l_GPUs(ppx*qqy,t_rank),c_GPU(ppx*qqy))
        allocate(N_send(ppx*qqy),N_recv(t_rank))
        ! N_send means, on each rank, it only sends particles to the initial GPUs
        ! N_recv means, on each rank, it receives particles from all rank.
        ! However, N_recv has no use on secondary ranks/GPUs.
        allocate(d_isValid(np),d_indices(np),handle(np))

        allocate(out_np_cpu(1),ET_np_cpu(1))
        allocate(out_age_cpu(1),out_mass_cpu(1),out_comp_cpu(3))
        allocate(ET_age_cpu(1),ET_mass_cpu(1),ET_comp_cpu(3))
        allocate(mean_age(1),mean_comp(1),mean_mass(1),total_mass(1))

        allocate(out_np_de(1),ET_np_de(1))
        allocate(out_age_de(1),out_mass_de(1),out_comp_de(3))
        allocate(ET_age_de(1),ET_mass_de(1),ET_comp_de(3))
        allocate(mean_age_de(1),mean_comp_de(1),total_mass_de(1))

        allocate(conc_header(n_constituents))
        ! Set up output options for VTK grid output
        ! icwrite = 1
        vtk_file = trim(runname)//'_cgrid'  ! duplicated with the latter output?
        conc_header(1) = 'Concentration'
        conc_header(2) = 'Age'
        conc_header(3) = 'Mass'
        conc_header(4) = 'Comp'
        conc_header(5) = 'Delta'
        conc_header(6) = 'ET_Npart'
        conc_header(7) = 'ET_Mass'
        conc_header(8) = 'ET_Age'
        conc_header(9) = 'ET_Comp'

        allocate(PET_balance(2),PET_balance_da(2))
        allocate(PET_balance_de(2),PET_balance_da_de(2))
        PET_balance = 0.0d0
        PET_balance_da = 0.0d0

        nattri_c = 17 + 2*nind_c
        nattri = nattri_c

        allocate(P(np,nattri_c),P_de(np,nattri_c))
        P = 0.d0    ! clear out all particle attributes
        P(1:np,7:9) = 1.d0
        ! make all particles active to start with and original from 1 = GW/IC
        ! this is necessary since we need P array for restart.

        P_de   = P
        dz_de  = dz
        dz_T   => dz_de
        P_T    => P_de
        d_isValid_T => d_isValid
        d_indices_T => d_indices

        allocate(P_send(tPB*nattri_c),P_recv(tPB*nattri_c))
        ! if send and recv larger than 256??? add some if condition

        allocate(Zonet_new(-buff+1:nx_c+buff,-buff+1:ny_c+buff))
        allocate(p_num(nx_c,ny_c),c_sum(max(nx_c,ny_c)))
        grid = 0
        Zonet_new = -1
        Zonet_new(1:nx_c,1:ny_c) = 0
        p_num = 1

        allocate(Saturation_cpu(nx_c,ny_c,nz_c),Porosity_cpu(nx_c,ny_c,nz_c))
        allocate(EvapTrans_cpu(nx_c,ny_c,nz_c),CLMvars_cpu(nx_c,ny_c,nzclm))
        allocate(Vx_cpu(nx_c+1,ny_c,nz_c),Vy_cpu(nx_c,ny_c+1,nz_c),Vz_cpu(nx_c,ny_c,nz_c+1))

    end subroutine alloc_arrays_const

    subroutine alloc_arrays_temp(Porosity_cpu)
        implicit none
        real(8),intent(out):: Porosity_cpu(:,:,:)
        !--------------------------------------------------------------------
        ! allocate arrays
            allocate(DEM(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff))

            allocate(Vx(-buff+1:nnx1_c+1+buff,-buff+1:nny1_c+buff,nz_c), &
                     Vy(-buff+1:nnx1_c+buff,-buff+1:nny1_c+1+buff,nz_c), &
                     Vz(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c+1))

            allocate(Saturation(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c), &
                       Porosity(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c), &
                      EvapTrans(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c), &
                            Ind(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c))

            allocate(EvapTrans_da(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c))
            allocate(CLMvars(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nzclm))
            allocate(C(n_constituents,-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c))

            ! Intialize everything to Zero
            Vx = 0.0d0
            Vy = 0.0d0
            Vz = 0.0d0
            Saturation = 0.0d0
            Porosity = 0.0d0
            EvapTrans = 0.0d0
            EvapTrans_da = 0.0d0
            C = 0.0d0
            Ind = 1.0d0
            ! Ind is initialized when reading it.
            ! CLMvars is initialized when reading it.
            ! DEM is initialized when reading it.

            !-------------------------------------
            ! allocate arrays on GPU
            allocate(Vx_de(-buff+1:nnx1_c+1+buff,-buff+1:nny1_c+buff,nz_c), &
                     Vy_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+1+buff,nz_c), &
                     Vz_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c+1), &
                    Ind_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c))
            allocate(Saturation_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c), &
                     Porosity_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c), &
                     EvapTrans_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c), &
                     EvapTrans_da_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c), &
                     CLMvars_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff), &
                     Zone_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff))
            allocate(C_de(n_constituents,-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff,nz_c))

            ! Porosity = 0.3d0
            fname = trim(adjustl(pname))//'.out.porosity.pfb'
            call pfb_read(Porosity_cpu,fname,nx_c,ny_c,nz_c)
            Porosity(1+ix2_c-ix1_c:nnx2_c+ix2_c-ix1_c,1+iy2_c-iy1_c:nny2_c+iy2_c-iy1_c,:) = &
            Porosity_cpu(ix2_c+1:ix2_c+nnx2_c,iy2_c+1:iy2_c+nny2_c,:)
            Ind_de = Ind
            Porosity_de   = Porosity
            EvapTrans_T  => EvapTrans_de
            EvapTrans_da_T  => EvapTrans_da_de
            Saturation_T => Saturation_de
            Porosity_T   => Porosity_de
            CLMvars_T   => CLMvars_de
            Vx_T  => Vx_de
            Vy_T  => Vy_de
            Vz_T  => Vz_de
            Ind_T => Ind_de
            Zone_T => Zone_de

            Zone_de = -1
            Zone_de(-buff+1:nnx1_c+buff,-buff+1:nny1_c+buff) = &
            Zonet_new(-buff+ix1_c+1:ix1_c+nnx1_c+buff,-buff+iy1_c+1:iy1_c+nny1_c+buff)

            allocate(Saturation_h5(nnx2_c,nny2_c,nz_c),Porosity_h5(nnx2_c,nny2_c,nz_c))
            allocate(EvapTrans_h5(nnx2_c,nny2_c,nz_c),CLMvars_h5(nnx2_c,nny2_c,nzclm))
            allocate(Vx_h5(nnx2_c+1,nny2_c,nz_c),Vy_h5(nnx2_c,nny2_c+1,nz_c),Vz_h5(nnx2_c,nny2_c,nz_c+1))

    end subroutine alloc_arrays_temp

    subroutine initialize_time()
        implicit none
        ! How to do timing is also a question if we do asyn later.
        ! Set up timing
        Total_time1 = 0.d0
        Total_time2 = 0.d0
        t1 = 0.d0
        t2 = 0.d0

        IO_time_write = 0.d0
        parallel_time = 0.d0

        IO_time_read = 0.
        h2d_time = 0.
        d2h_time = 0.

        peri_time = 0.
        inte_time = 0.
        exit_time = 0.
        C_time    = 0.

        scan_time   = 0.
        copy_time   = 0.
        add2_time   = 0.
        thrust_time = 0.
    end subroutine initialize_time

    subroutine host2device()

        implicit none
        integer:: istat

            #if _TIMING == 1
            istat = cudaEventRecord(startEvent,0)
            #endif

        Vx_de = Vx
        Vy_de = Vy
        Vz_de = Vz
        Saturation_de = Saturation
        EvapTrans_de  = EvapTrans
        if (mod(kk,add_f) == 0) EvapTrans_da_de = EvapTrans_da
        CLMvars_de    = CLMvars(:,:,11)
        ! probably this can be deallocated after adding of particles
        ! Now just think about the hourly add of particles.

        out_age_de  = 0.d0
        out_mass_de = 0.d0
        out_comp_de = 0.d0
        out_np_de   = 0

        et_age_de  = 0.d0
        et_mass_de = 0.d0
        et_comp_de = 0.d0
        et_np_de   = 0

        mean_age_de    = 0.d0
        mean_comp_de   = 0.d0
        total_mass_de  = 0.d0
        PET_balance_de = 0.d0

        C_de = 0.d0
        ! We can think about asyn transfer of data to GPU here to hide the time cost when doing
        ! the following adding of particles.

        N_send = 0
        N_recv = 0

            #if _TIMING == 1
            istat = cudaEventRecord(stopEvent,0)
            istat = cudaEventSynchronize(stopEvent)
            istat = cudaEventElapsedTime(h2d_time,startEvent,stopEvent)
            #endif
    end subroutine host2device

    subroutine null_texture()
        implicit none
        if(work_comm /= MPI_COMM_NULL) then
            nullify(EvapTrans_T,Saturation_T,Porosity_T)
            nullify(Vx_T,Vy_T,Vz_T,Ind_T,dz_T,P_T,Zone_T)
            nullify(d_isValid_T,d_indices_T)
        end if
    end subroutine null_texture

end module variable_list