program simple_write
  use mpi
  use cudafor
  implicit none

  integer :: rank, nproc, ierr, status(MPI_STATUS_SIZE)
  integer :: i, j, k

  integer,allocatable,device :: P(:)

  type (cudaEvent) :: startEvent, stopEvent
  real:: time1, time2, time3

  integer:: istat
  integer:: np
  real(8):: P_cpu
  character*200 ranknum

    call mpi_init(ierr)
    call mpi_comm_size(mpi_comm_world, nproc, ierr)
    call mpi_comm_rank(mpi_comm_world, rank, ierr)

    ierr = cudaSetDevice(rank)

    np = 2000000000; allocate(P(np))
    if (rank == 0) P = 1.d0
    if (rank == 1) P = 0.d0

    istat = cudaEventCreate(startEvent)
    istat = cudaEventCreate(stopEvent)

    write(ranknum,'(i5.5)') rank

    open(10,file='Transfer_time.'//trim(adjustl(ranknum))//'.txt')

    if(rank == 0) then

        i = 2
        do k = 1, 30

            istat = cudaEventRecord(startEvent, 0)
                do j = 1, 30
                    call MPI_SEND(P(1:i),i,MPI_INTEGER,1,j,MPI_COMM_WORLD,ierr)
                end do
            istat = cudaEventRecord(stopEvent, 0)
            istat = cudaEventSynchronize(stopEvent)
            istat = cudaEventElapsedTime(time1, startEvent, stopEvent)

            write(10,*) i, '*4 Bytes Send', time1/30., 'ms'

            i = i*2
            if(i > np) goto 400
        end do

    endif

    400 continue

    if(rank == 1) then

        i = 2
        do k = 1, 30

            istat = cudaEventRecord(startEvent, 0)
                do j = 1, 30
                    call MPI_RECV(P(1:i),i,MPI_INTEGER,0,j,MPI_COMM_WORLD,status,ierr)
                end do
            istat = cudaEventRecord(stopEvent, 0)
            istat = cudaEventSynchronize(stopEvent)
            istat = cudaEventElapsedTime(time2, startEvent, stopEvent)

            write(10,*) i, '*4 Bytes Receive', time2/30., 'ms'

            i = i*2
            if(i > np) goto 500
        end do

    endif

    500 continue

    flush(10)
    close(10)
    istat = cudaEventDestroy(startEvent)
    istat = cudaEventDestroy(stopEvent)

    call mpi_finalize(ierr)

  end program simple_write

 ! do i=0,nproc-1
 !     call MPI_BARRIER(MPI_COMM_WORLD, ierr)
 !     if(i==rank)then
 !         print *, 'before',rank,cpu_rank
 !     endif
 ! enddo