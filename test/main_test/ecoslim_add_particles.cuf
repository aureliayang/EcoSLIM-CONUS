module add_particles
    ! attributes(global) subroutine add_init_particles
    ! attributes(global) subroutine river_init_particles
    ! attributes(global) subroutine scan_new_particles
    ! attributes(global) subroutine add_new_particles

    use curand_device
    use mrand, only: h   ! curand states saved in global memory
contains
attributes(global) subroutine add_init_particles( &
    P,C,Saturation,Porosity,np_ic,nind,denh2o,tout1, &
    nnx1,nny1,nz,ix1,iy1,dx,dy,dz)

    implicit none
    real(8),intent(inout):: P(:,:), C(:,:,:,:)
    real(8),intent(in):: Saturation(:,:,:), Porosity(:,:,:), dz(:)
    integer,value:: np_ic, nind
    integer,value:: tout1, nnx1, nny1, nz, ix1, iy1
    real(8),value:: dx, dy, denh2o
    integer:: i, j, k, index, ij, ik, ii
    real(8):: Z

    ii = (blockIdx%x - 1) * blockDim%x + threadIdx%x

    ! get i, j, k from ii
    if(ii <= nnx1*nny1*nz) then
        if(mod(ii,nnx1*nny1) == 0) then
            k = ii/(nnx1*nny1)
            j = nny1
            i = nnx1
        else
            k = ii/(nnx1*nny1) + 1
            if(mod(mod(ii,nnx1*nny1),nnx1) == 0) then
                j = mod(ii,nnx1*nny1)/nnx1
                i = nnx1
            else
                j = mod(ii,nnx1*nny1)/nnx1 + 1
                i = mod(mod(ii,nnx1*nny1),nnx1)
            end if
        end if

        if(Saturation(i,j,k) > 0.d0) then
            do ij = 1, np_ic

                index = ii*np_ic - (ij - 1)

                P(index,1) = dble(i-1+ix1)*dx + curand_uniform(h(ii))*dx ! should use global
                P(index,2) = dble(j-1+iy1)*dy + curand_uniform(h(ii))*dy ! update that for random number
                P(index,13+2*nind) = dble(index)
                P(index,14+2*nind) = P(index,1)
                P(index,15+2*nind) = P(index,2)
                P(index,17+2*nind) = tout1

                Z = 0.0d0
                do ik = 1, k
                    Z = Z + dz(ik)
                end do
                P(index,3) = Z - dz(k)*curand_uniform(h(ii))
                P(index,16+2*nind) = P(index,3)

                P(index,6) = dx*dy*dz(k)*(Porosity(i,j,k) &
                             *Saturation(i,j,k))*denh2o*(1.0d0/dble(np_ic))
                P(index,7) = 1.0d0
                P(index,8) = 1.0d0  ! make particle active

                C(1,i,j,k) = 0.d0
                C(1,i,j,k) = C(1,i,j,k) + P(index,8)*P(index,6) / &
                (dx*dy*dz(k)*(Porosity(i,j,k)*Saturation(i,j,k)))

                C(2,i,j,k) = 0.d0
                C(2,i,j,k) = C(2,i,j,k) + P(index,8)*P(index,4)*P(index,6)

                C(4,i,j,k) = 0.d0
                C(4,i,j,k) = C(4,i,j,k) + P(index,8)*P(index,7)*P(index,6)

                C(3,i,j,k) = 0.d0
                C(3,i,j,k) = C(3,i,j,k) + P(index,8)*P(index,6)

            enddo
        endif

        if(C(3,i,j,k) > 0.d0)  C(2,i,j,k) = C(2,i,j,k) / C(3,i,j,k)
        if(C(3,i,j,k) > 0.d0)  C(4,i,j,k) = C(4,i,j,k) / C(3,i,j,k)

    end if
end subroutine add_init_particles

end module add_particles