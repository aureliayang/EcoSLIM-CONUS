module utilities
    ! subroutine copy_grid
    ! subroutine copy_grid_n
    ! subroutine subzones_for_transfer
    ! subroutine combine_p_num
    ! attributes(global) subroutine build_p_num
    ! subroutine receive_Zone_de

    use cudafor
    use variable_list, only: nx, ny
    use variable_list, only: buff, ppx, qqy, rank, status
    use variable_list, only: Zonet_old, Zonet_new, Zone_de, Zones_old
    use variable_list, only: grid, grid_old
    use variable_list, only: dx, dy, np_active, p_num
    use variable_list, only: nnx1,nny1,nnx2,nny2,ix1,iy1,ix2,iy2  ! this is the old
    use variable_list, only: nnx1n,nny1n,nnx2n,nny2n,ix1n,iy1n,ix2n,iy2n

contains
    subroutine copy_grid()
        implicit none

        if (rank /= ppx*qqy) then
            ix1  = grid(rank+1,1)
            nnx1 = grid(rank+1,3)
            iy1  = grid(rank+1,2)
            nny1 = grid(rank+1,4)

            ix2 = ix1 - buff; nnx2 = nnx1 + 2*buff
            iy2 = iy1 - buff; nny2 = nny1 + 2*buff

            if(ix1 == 0) then
                ix2  = ix1
                nnx2 = nnx2 - buff
            endif
            if(ix1+nnx1 == nx) nnx2 = nnx2 - buff

            if(iy1 == 0) then
                iy2  = iy1
                nny2 = nny2 - buff
            endif
            if(iy1+nny1 == ny) nny2 = nny2 - buff
        end if
    end subroutine copy_grid

    subroutine receive_Zone_de()
        ! we use send and recv now, and will consider scatter and gather later
        use mpi
        implicit none
        integer:: ncount1, request1(ppx*qqy), request2
        integer:: i, ierr

        if(rank /= ppx*qqy) then
            call MPI_RECV(Zone_de,(nnx1+2*buff)*(nny1+2*buff),MPI_INTEGER, &
            ppx*qqy,41,MPI_COMM_WORLD,status,ierr)
        else
            ncount1 = 0
            do i = 0, ppx*qqy - 1
                ncount1 = ncount1 + 1
                 ix1 = grid(i+1,1);  iy1 = grid(i+1,2)
                nnx1 = grid(i+1,3); nny1 = grid(i+1,4)
                call MPI_SEND(Zonet_new(-buff+ix1+1:ix1+nnx1+buff,-buff+iy1+1:iy1+nny1+buff), &
                (nnx1+2*buff)*(nny1+2*buff),MPI_INTEGER,i,41,MPI_COMM_WORLD,ierr)
            end do
        endif
    end subroutine receive_Zone_de


end module utilities