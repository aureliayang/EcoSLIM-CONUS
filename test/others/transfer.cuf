module utilities
    use mpi
    integer:: ppx = 2, qqy = 2
    integer:: buff = 1, nx = 9, ny = 8
    integer:: ix1, iy1, nnx1, nny1, ii, jj
    integer:: rank, t_rank, status(MPI_STATUS_SIZE)
    integer,allocatable:: grid(:,:)
    integer,allocatable:: Zone_de(:,:), Zonet_new(:,:)
    integer:: request1(4), request2
contains
    subroutine receive_Zone_de()
        ! we use send and recv now, and will consider scatter and gather later
        implicit none
        integer:: ncount1
        integer:: i, ierr

        if(rank /= ppx*qqy) then
            call MPI_IRECV(Zone_de,(nnx1+2*buff)*(nny1+2*buff),MPI_INTEGER, &
            ppx*qqy,41,MPI_COMM_WORLD,request2,ierr)
        else
            ncount1 = 0
            do i = 0, ppx*qqy - 1
                ncount1 = ncount1 + 1
                ix1 = grid(i+1,1);  iy1 = grid(i+1,2)
                nnx1 = grid(i+1,3); nny1 = grid(i+1,4)
                call MPI_ISEND(Zonet_new(-buff+ix1+1:ix1+nnx1+buff,-buff+iy1+1:iy1+nny1+buff), &
                (nnx1+2*buff)*(nny1+2*buff),MPI_INTEGER,i,41,MPI_COMM_WORLD,request1(ncount1),ierr)
            end do
        endif
    end subroutine receive_Zone_de
end module utilities

program test_transfer
    use mpi
    use utilities
    implicit none
    integer:: i, ierr ! used for MPI
    integer:: world_group, work_group, manage_group, manage_ranks(1)
    integer:: work_comm, manage_comm

    call MPI_INIT(ierr)
    call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierr)
    call MPI_COMM_SIZE(MPI_COMM_WORLD, t_rank, ierr)

    call MPI_COMM_GROUP(MPI_COMM_WORLD, world_group, ierr)
    manage_ranks = ppx*qqy ! only one rank used to manage
    call MPI_GROUP_EXCL(world_group, 1, manage_ranks, work_group, ierr)
    call MPI_GROUP_INCL(world_group, 1, manage_ranks, manage_group, ierr)
    call MPI_COMM_CREATE(MPI_COMM_WORLD, work_group, work_comm, ierr)
    call MPI_COMM_CREATE(MPI_COMM_WORLD, manage_group, manage_comm, ierr)

    allocate(grid(ppx*qqy,4))
    grid(1,:) = [0,   0,   4,   4]
    grid(2,:) = [0,   4,   4,   4]
    grid(3,:) = [4,   0,   5,   4]
    grid(4,:) = [4,   4,   5,   4]

    if(rank /= ppx*qqy) then
        ix1 = grid(rank+1,1)
        iy1 = grid(rank+1,2)
        nnx1 = grid(rank+1,3)
        nny1 = grid(rank+1,4)
    endif

    if(rank == ppx*qqy) then
        allocate(Zonet_new(-buff+1:nx+buff,-buff+1:ny+buff))
        Zonet_new(-buff+1:nx+buff,0) = [-1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1]
        Zonet_new(-buff+1:nx+buff,1) = [-1,   0,   0,   0,   0,   2,   2,   2,   2,   2,  -1]
        Zonet_new(-buff+1:nx+buff,2) = [-1,   0,   0,   0,   0,   2,   2,   2,   2,   2,  -1]
        Zonet_new(-buff+1:nx+buff,3) = [-1,   0,   0,   0,   0 ,  2,   2,   2,   2,   2,  -1]
        Zonet_new(-buff+1:nx+buff,4) = [-1,   0,   0,   0,   0,   2,   2,   2,   2,   2,  -1]
        Zonet_new(-buff+1:nx+buff,5) = [-1,   1,   1,   1,   1,   3,   3,   3,   3,   3,  -1]
        Zonet_new(-buff+1:nx+buff,6) = [-1,   1,   1,   1,   1,   3,   3,   3,   3,   3,  -1]
        Zonet_new(-buff+1:nx+buff,7) = [-1,   1 ,  1,   1,   1 ,  3,   3,   3,   3,   3,  -1]
        Zonet_new(-buff+1:nx+buff,8) = [-1,   1,   1,   1 ,  1,   3,   3,   3,   3,   3,  -1]
        Zonet_new(-buff+1:nx+buff,9) = [-1,  -1 , -1,  -1 , -1 , -1,  -1,  -1,  -1,  -1,  -1]
    endif

    if(rank /= ppx*qqy) then
        allocate(Zone_de(-buff+1:nnx1+buff,-buff+1:nny1+buff))
        Zone_de = 0
    endif

    do i=0,t_rank-2
        call MPI_BARRIER(MPI_COMM_WORLD, ierr)
        if(i==rank)then
            write(*,*) 'rank',rank
            if (rank == 0 .or. rank == 1) write(*,'(6(6(i3,1x),/))') &
            ((Zone_de(ii,jj),ii=-buff+1,nnx1+buff),jj=-buff+1,nny1+buff)
            if (rank == 2 .or. rank == 3) write(*,'(6(7(i3,1x),/))') &
            ((Zone_de(ii,jj),ii=-buff+1,nnx1+buff),jj=-buff+1,nny1+buff)
        endif
    enddo

    call receive_Zone_de()

    if(rank /= ppx*qqy) call MPI_WAIT(request2,status,ierr)

    do i=0,t_rank-2
        call MPI_BARRIER(MPI_COMM_WORLD, ierr)
        if(i==rank)then
            write(*,*) 'rank_NEW',rank
            if (rank == 0 .or. rank == 1) write(*,'(6(6(i3,1x),/))') &
            ((Zone_de(ii,jj),ii=-buff+1,nnx1+buff),jj=-buff+1,nny1+buff)
            if (rank == 2 .or. rank == 3) write(*,'(6(7(i3,1x),/))') &
            ((Zone_de(ii,jj),ii=-buff+1,nnx1+buff),jj=-buff+1,nny1+buff)
        endif
    enddo

    call MPI_FINALIZE(ierr)
end program