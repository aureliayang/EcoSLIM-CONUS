module mrand
    use curand_device
    type(curandStateXORWOW),allocatable,device:: h(:)
contains

    attributes(global) subroutine createRand_init(nx,ny,nz,rank)
        integer(8),value:: nx, ny, nz, rank
        integer(8):: seed, seq, offset
        integer:: ii
            ii = threadIdx%x
            seed = 123_8
            seq = 0_8
            offset = 3_8*ii + 3_8*ii*nx*ny*nz*rank
            call curand_init(seed, seq, offset, h(ii))
    end subroutine createRand_init

    attributes(global) subroutine createRand_loop(np,rank,pfnt)
        integer(8),value:: np, rank, pfnt
        integer(8):: seed, seq, offset
        integer:: ii
            ii = threadIdx%x
            seed = 12345_8
            seq = 0_8
            offset = 40_8*ii*pfnt + 40_8*ii*pfnt*np*rank
            call curand_init(seed, seq, offset, h(ii))
    end subroutine createRand_loop

    attributes(global) subroutine createRand_test()
    ! integer(8),value:: nx, ny, nz, rank
    integer(8):: seed, seq, offset
    integer:: ii
        ii = threadIdx%x
        seed = 123_8
        seq = 0_8
        offset = ii
        call curand_init(seed, seq, offset, h(ii))
    end subroutine createRand_test

    attributes(global) subroutine callRand_test(rnum,pfnt)
    real(8),intent(out):: rnum(:,:)
    integer,value:: pfnt
    integer:: ii,j
        ii = threadIdx%x
        do j = 1, pfnt
            rnum(ii,j) = curand_uniform(h(ii))
        end do
    end subroutine callRand_test

end module