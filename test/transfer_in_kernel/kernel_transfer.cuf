program simple_write
  use kernel_sr
  use cudafor
  implicit none

  integer :: rank, nproc, ierr, status(MPI_STATUS_SIZE)
  integer :: i, j, k

  real(8),allocatable,device :: P(:)
  real(8),allocatable :: P_cpu(:)

  type (cudaEvent) :: startEvent, stopEvent
  real:: time1, time2, time3

  integer:: istat
  integer:: np, tPB = 256

  character*200 ranknum

    call mpi_init(ierr)
    call mpi_comm_size(mpi_comm_world, nproc, ierr)
    call mpi_comm_rank(mpi_comm_world, rank, ierr)

    ierr = cudaSetDevice(rank)

    np = tPB; allocate(P(np),P_cpu(np))
    if (rank == 0) P = 1.d0
    if (rank == 1) P = 0.d0

    istat = cudaEventCreate(startEvent)
    istat = cudaEventCreate(stopEvent)

    if (rank == 0) call sendp<<< ceiling(dble(tPB)/tPB),tPB >>> (P)
    if (rank == 1) call recvp<<< ceiling(dble(tPB)/tPB),tPB >>> (P)

    istat = cudaEventDestroy(startEvent)
    istat = cudaEventDestroy(stopEvent)

    call mpi_finalize(ierr)

  end program simple_write

 ! do i=0,nproc-1
 !     call MPI_BARRIER(MPI_COMM_WORLD, ierr)
 !     if(i==rank)then
 !         print *, 'before',rank,cpu_rank
 !     endif
 ! enddo